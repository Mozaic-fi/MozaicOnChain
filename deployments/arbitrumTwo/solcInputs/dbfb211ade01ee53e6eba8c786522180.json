{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interfaces/gmx/ICallbackContract.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.18;\n\ninterface ICallbackContract {\n    enum State { Deposit, Withdrawal, Order }\n\n    function addKey(bytes32 key, State stateOption) external;\n\n    function getKeys(State stateOption) external view returns(bytes32[] memory);\n\n    function addWithdrawalData(bytes32 withdrawalKey, uint256 lpAmount, address receiver) external;\n}"
    },
    "contracts/interfaces/gmx/IDepositCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../libraries/gmx/EventUtils.sol\";\nimport \"../../libraries/gmx/Deposit.sol\";\n\n// @title IDepositCallbackReceiver\n// @dev interface for a deposit callback contract\ninterface IDepositCallbackReceiver {\n    // @dev called after a deposit execution\n    // @param key the key of the deposit\n    // @param deposit the deposit that was executed\n    function afterDepositExecution(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after a deposit cancellation\n    // @param key the key of the deposit\n    // @param deposit the deposit that was cancelled\n    function afterDepositCancellation(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external;\n}"
    },
    "contracts/interfaces/gmx/IGMXPlugin.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.18;\n\ninterface IGMXPlugin {\n    function transferAllTokensToVault() external;\n}"
    },
    "contracts/interfaces/gmx/IOrderCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../libraries/gmx/EventUtils.sol\";\nimport \"../../libraries/gmx/Order.sol\";\n\n// @title IOrderCallbackReceiver\n// @dev interface for an order callback contract\ninterface IOrderCallbackReceiver {\n    // @dev called after an order execution\n    // @param key the key of the order\n    // @param order the order that was executed\n    function afterOrderExecution(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after an order cancellation\n    // @param key the key of the order\n    // @param order the order that was cancelled\n    function afterOrderCancellation(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after an order has been frozen, see OrderUtils.freezeOrder in OrderHandler for more info\n    // @param key the key of the order\n    // @param order the order that was frozen\n    function afterOrderFrozen(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external;\n}"
    },
    "contracts/interfaces/gmx/IWithdrawalCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"../../libraries/gmx/EventUtils.sol\";\nimport \"../../libraries/gmx//Withdrawal.sol\";\n\n// @title IWithdrawalCallbackReceiver\n// @dev interface for a withdrawal callback contract\ninterface IWithdrawalCallbackReceiver {\n    // @dev called after a withdrawal execution\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was executed\n    function afterWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external;\n\n    // @dev called after a withdrawal cancellation\n    // @param key the key of the withdrawal\n    // @param withdrawal the withdrawal that was cancelled\n    function afterWithdrawalCancellation(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external;\n}"
    },
    "contracts/interfaces/vaults/IVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.18;\n\n\ninterface IVault {\n    function burnLP(uint256 _lpAmount) external;\n    function transferLP(address _account, uint256 _lpAmount) external;\n}"
    },
    "contracts/interfaces/vaults/IVaultLocker.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.18;\n\n\ninterface IVaultLocker {\n    function getLockerStatus() external view returns(bool);\n}"
    },
    "contracts/libraries/gmx/ArbSys.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title ArbSys\n// @dev Globally available variables for Arbitrum may have both an L1 and an L2\n// value, the ArbSys interface is used to retrieve the L2 value\ninterface ArbSys {\n    function arbBlockNumber() external view returns (uint256);\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\n}"
    },
    "contracts/libraries/gmx/Chain.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./ArbSys.sol\";\n\n// @title Chain\n// @dev Wrap the calls to retrieve chain variables to handle differences\n// between chain implementations\nlibrary Chain {\n    // if the ARBITRUM_CHAIN_ID changes, a new version of this library\n    // and contracts depending on it would need to be deployed\n    uint256 public constant ARBITRUM_CHAIN_ID = 42161;\n    uint256 public constant ARBITRUM_SEPOLIA_CHAIN_ID = 421614;\n\n    ArbSys public constant arbSys = ArbSys(address(100));\n\n    // @dev return the current block's timestamp\n    // @return the current block's timestamp\n    function currentTimestamp() internal view returns (uint256) {\n        return block.timestamp;\n    }\n\n    // @dev return the current block's number\n    // @return the current block's number\n    function currentBlockNumber() internal view returns (uint256) {\n        if (shouldUseArbSysValues()) {\n            return arbSys.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    // @dev return the current block's hash\n    // @return the current block's hash\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\n        if (shouldUseArbSysValues()) {\n            return arbSys.arbBlockHash(blockNumber);\n        }\n\n        return blockhash(blockNumber);\n    }\n\n    function shouldUseArbSysValues() internal view returns (bool) {\n        return block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_SEPOLIA_CHAIN_ID;\n    }\n}"
    },
    "contracts/libraries/gmx/Deposit.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n// @title Deposit\n// @dev Struct for deposits\nlibrary Deposit {\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the account depositing liquidity\n    // @param receiver the address to send the liquidity tokens to\n    // @param callbackContract the callback contract\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the market to deposit to\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialLongToken;\n        address initialShortToken;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n    // @param initialLongTokenAmount the amount of long tokens to deposit\n    // @param initialShortTokenAmount the amount of short tokens to deposit\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\n    // @param updatedAtBlock the block that the deposit was last updated at\n    // sending funds back to the user in case the deposit gets cancelled\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    struct Numbers {\n        uint256 initialLongTokenAmount;\n        uint256 initialShortTokenAmount;\n        uint256 minMarketTokens;\n        uint256 updatedAtBlock;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    function initialLongToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialLongToken;\n    }\n\n    function setInitialLongToken(Props memory props, address value) internal pure {\n        props.addresses.initialLongToken = value;\n    }\n\n    function initialShortToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialShortToken;\n    }\n\n    function setInitialShortToken(Props memory props, address value) internal pure {\n        props.addresses.initialShortToken = value;\n    }\n\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.longTokenSwapPath;\n    }\n\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.longTokenSwapPath = value;\n    }\n\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.shortTokenSwapPath;\n    }\n\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.shortTokenSwapPath = value;\n    }\n\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialLongTokenAmount;\n    }\n\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialLongTokenAmount = value;\n    }\n\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialShortTokenAmount;\n    }\n\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialShortTokenAmount = value;\n    }\n\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minMarketTokens;\n    }\n\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\n        props.numbers.minMarketTokens = value;\n    }\n\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtBlock;\n    }\n\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtBlock = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n}"
    },
    "contracts/libraries/gmx/EventUtils.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nlibrary EventUtils {\n    struct EmitPositionDecreaseParams {\n        bytes32 key;\n        address account;\n        address market;\n        address collateralToken;\n        bool isLong;\n    }\n\n    struct EventLogData {\n        AddressItems addressItems;\n        UintItems uintItems;\n        IntItems intItems;\n        BoolItems boolItems;\n        Bytes32Items bytes32Items;\n        BytesItems bytesItems;\n        StringItems stringItems;\n    }\n\n    struct AddressItems {\n        AddressKeyValue[] items;\n        AddressArrayKeyValue[] arrayItems;\n    }\n\n    struct UintItems {\n        UintKeyValue[] items;\n        UintArrayKeyValue[] arrayItems;\n    }\n\n    struct IntItems {\n        IntKeyValue[] items;\n        IntArrayKeyValue[] arrayItems;\n    }\n\n    struct BoolItems {\n        BoolKeyValue[] items;\n        BoolArrayKeyValue[] arrayItems;\n    }\n\n    struct Bytes32Items {\n        Bytes32KeyValue[] items;\n        Bytes32ArrayKeyValue[] arrayItems;\n    }\n\n    struct BytesItems {\n        BytesKeyValue[] items;\n        BytesArrayKeyValue[] arrayItems;\n    }\n\n    struct StringItems {\n        StringKeyValue[] items;\n        StringArrayKeyValue[] arrayItems;\n    }\n\n    struct AddressKeyValue {\n        string key;\n        address value;\n    }\n\n    struct AddressArrayKeyValue {\n        string key;\n        address[] value;\n    }\n\n    struct UintKeyValue {\n        string key;\n        uint256 value;\n    }\n\n    struct UintArrayKeyValue {\n        string key;\n        uint256[] value;\n    }\n\n    struct IntKeyValue {\n        string key;\n        int256 value;\n    }\n\n    struct IntArrayKeyValue {\n        string key;\n        int256[] value;\n    }\n\n    struct BoolKeyValue {\n        string key;\n        bool value;\n    }\n\n    struct BoolArrayKeyValue {\n        string key;\n        bool[] value;\n    }\n\n    struct Bytes32KeyValue {\n        string key;\n        bytes32 value;\n    }\n\n    struct Bytes32ArrayKeyValue {\n        string key;\n        bytes32[] value;\n    }\n\n    struct BytesKeyValue {\n        string key;\n        bytes value;\n    }\n\n    struct BytesArrayKeyValue {\n        string key;\n        bytes[] value;\n    }\n\n    struct StringKeyValue {\n        string key;\n        string value;\n    }\n\n    struct StringArrayKeyValue {\n        string key;\n        string[] value;\n    }\n\n    function initItems(AddressItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.AddressKeyValue[](size);\n    }\n\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\n    }\n\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(UintItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.UintKeyValue[](size);\n    }\n\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\n    }\n\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(IntItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.IntKeyValue[](size);\n    }\n\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\n    }\n\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(BoolItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.BoolKeyValue[](size);\n    }\n\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\n    }\n\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\n        items.items = new EventUtils.Bytes32KeyValue[](size);\n    }\n\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\n    }\n\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(BytesItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.BytesKeyValue[](size);\n    }\n\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\n    }\n\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n\n    function initItems(StringItems memory items, uint256 size) internal pure {\n        items.items = new EventUtils.StringKeyValue[](size);\n    }\n\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\n    }\n\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\n        items.items[index].key = key;\n        items.items[index].value = value;\n    }\n\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\n        items.arrayItems[index].key = key;\n        items.arrayItems[index].value = value;\n    }\n}"
    },
    "contracts/libraries/gmx/Order.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\nimport \"./Chain.sol\";\n\n// @title Order\n// @dev Struct for orders\nlibrary Order {\n    using Order for Props;\n\n    enum OrderType {\n        // @dev MarketSwap: swap token A to token B at the current market price\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\n        MarketSwap,\n        // @dev LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\n        LimitSwap,\n        // @dev MarketIncrease: increase position at the current market price\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\n        MarketIncrease,\n        // @dev LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\n        LimitIncrease,\n        // @dev MarketDecrease: decrease position at the current market price\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\n        MarketDecrease,\n        // @dev LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\n        LimitDecrease,\n        // @dev StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\n        StopLossDecrease,\n        // @dev Liquidation: allows liquidation of positions if the criteria for liquidation are met\n        Liquidation\n    }\n\n    // to help further differentiate orders\n    enum SecondaryOrderType {\n        None,\n        Adl\n    }\n\n    enum DecreasePositionSwapType {\n        NoSwap,\n        SwapPnlTokenToCollateralToken,\n        SwapCollateralTokenToPnlToken\n    }\n\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n    // @param account the account of the order\n    // @param receiver the receiver for any token transfers\n    // this field is meant to allow the output of an order to be\n    // received by an address that is different from the creator of the\n    // order whether this is for swaps or whether the account is the owner\n    // of a position\n    // for funding fees and claimable collateral, the funds are still\n    // credited to the owner of the position indicated by order.account\n    // @param callbackContract the contract to call for callbacks\n    // @param uiFeeReceiver the ui fee receiver\n    // @param market the trading market\n    // @param initialCollateralToken for increase orders, initialCollateralToken\n    // is the token sent in by the user, the token will be swapped through the\n    // specified swapPath, before being deposited into the position as collateral\n    // for decrease orders, initialCollateralToken is the collateral token of the position\n    // withdrawn collateral from the decrease of the position will be swapped\n    // through the specified swapPath\n    // for swaps, initialCollateralToken is the initial token sent for the swap\n    // @param swapPath an array of market addresses to swap through\n    struct Addresses {\n        address account;\n        address receiver;\n        address cancellationReceiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address initialCollateralToken;\n        address[] swapPath;\n    }\n\n    // @param sizeDeltaUsd the requested change in position size\n    // @param initialCollateralDeltaAmount for increase orders, initialCollateralDeltaAmount\n    // is the amount of the initialCollateralToken sent in by the user\n    // for decrease orders, initialCollateralDeltaAmount is the amount of the position's\n    // collateralToken to withdraw\n    // for swaps, initialCollateralDeltaAmount is the amount of initialCollateralToken sent\n    // in for the swap\n    // @param orderType the order type\n    // @param triggerPrice the trigger price for non-market orders\n    // @param acceptablePrice the acceptable execution price for increase / decrease orders\n    // @param executionFee the execution fee for keepers\n    // @param callbackGasLimit the gas limit for the callbackContract\n    // @param minOutputAmount the minimum output amount for decrease orders and swaps\n    // note that for decrease orders, multiple tokens could be received, for this reason, the\n    // minOutputAmount value is treated as a USD value for validation in decrease orders\n    // @param updatedAtBlock the block at which the order was last updated\n    struct Numbers {\n        OrderType orderType;\n        DecreasePositionSwapType decreasePositionSwapType;\n        uint256 sizeDeltaUsd;\n        uint256 initialCollateralDeltaAmount;\n        uint256 triggerPrice;\n        uint256 acceptablePrice;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n        uint256 minOutputAmount;\n        uint256 updatedAtBlock;\n        uint256 updatedAtTime;\n    }\n\n    // @param isLong whether the order is for a long or short\n    // @param shouldUnwrapNativeToken whether to unwrap native tokens before\n    // transferring to the user\n    // @param isFrozen whether the order is frozen\n    struct Flags {\n        bool isLong;\n        bool shouldUnwrapNativeToken;\n        bool isFrozen;\n        bool autoCancel;\n    }\n\n    // @dev the order account\n    // @param props Props\n    // @return the order account\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    // @dev set the order account\n    // @param props Props\n    // @param value the value to set to\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    // @dev the order receiver\n    // @param props Props\n    // @return the order receiver\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    // @dev set the order receiver\n    // @param props Props\n    // @param value the value to set to\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function cancellationReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.cancellationReceiver;\n    }\n\n    function setCancellationReceiver(Props memory props, address value) internal pure {\n        props.addresses.cancellationReceiver = value;\n    }\n\n    // @dev the order callbackContract\n    // @param props Props\n    // @return the order callbackContract\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    // @dev set the order callbackContract\n    // @param props Props\n    // @param value the value to set to\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    // @dev the order market\n    // @param props Props\n    // @return the order market\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    // @dev set the order market\n    // @param props Props\n    // @param value the value to set to\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    // @dev the order initialCollateralToken\n    // @param props Props\n    // @return the order initialCollateralToken\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\n        return props.addresses.initialCollateralToken;\n    }\n\n    // @dev set the order initialCollateralToken\n    // @param props Props\n    // @param value the value to set to\n    function setInitialCollateralToken(Props memory props, address value) internal pure {\n        props.addresses.initialCollateralToken = value;\n    }\n\n    // @dev the order uiFeeReceiver\n    // @param props Props\n    // @return the order uiFeeReceiver\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    // @dev set the order uiFeeReceiver\n    // @param props Props\n    // @param value the value to set to\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    // @dev the order swapPath\n    // @param props Props\n    // @return the order swapPath\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.swapPath;\n    }\n\n    // @dev set the order swapPath\n    // @param props Props\n    // @param value the value to set to\n    function setSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.swapPath = value;\n    }\n\n    // @dev the order type\n    // @param props Props\n    // @return the order type\n    function orderType(Props memory props) internal pure returns (OrderType) {\n        return props.numbers.orderType;\n    }\n\n    // @dev set the order type\n    // @param props Props\n    // @param value the value to set to\n    function setOrderType(Props memory props, OrderType value) internal pure {\n        props.numbers.orderType = value;\n    }\n\n    function decreasePositionSwapType(Props memory props) internal pure returns (DecreasePositionSwapType) {\n        return props.numbers.decreasePositionSwapType;\n    }\n\n    function setDecreasePositionSwapType(Props memory props, DecreasePositionSwapType value) internal pure {\n        props.numbers.decreasePositionSwapType = value;\n    }\n\n    // @dev the order sizeDeltaUsd\n    // @param props Props\n    // @return the order sizeDeltaUsd\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\n        return props.numbers.sizeDeltaUsd;\n    }\n\n    // @dev set the order sizeDeltaUsd\n    // @param props Props\n    // @param value the value to set to\n    function setSizeDeltaUsd(Props memory props, uint256 value) internal pure {\n        props.numbers.sizeDeltaUsd = value;\n    }\n\n    // @dev the order initialCollateralDeltaAmount\n    // @param props Props\n    // @return the order initialCollateralDeltaAmount\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.initialCollateralDeltaAmount;\n    }\n\n    // @dev set the order initialCollateralDeltaAmount\n    // @param props Props\n    // @param value the value to set to\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.initialCollateralDeltaAmount = value;\n    }\n\n    // @dev the order triggerPrice\n    // @param props Props\n    // @return the order triggerPrice\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\n        return props.numbers.triggerPrice;\n    }\n\n    // @dev set the order triggerPrice\n    // @param props Props\n    // @param value the value to set to\n    function setTriggerPrice(Props memory props, uint256 value) internal pure {\n        props.numbers.triggerPrice = value;\n    }\n\n    // @dev the order acceptablePrice\n    // @param props Props\n    // @return the order acceptablePrice\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\n        return props.numbers.acceptablePrice;\n    }\n\n    // @dev set the order acceptablePrice\n    // @param props Props\n    // @param value the value to set to\n    function setAcceptablePrice(Props memory props, uint256 value) internal pure {\n        props.numbers.acceptablePrice = value;\n    }\n\n    // @dev set the order executionFee\n    // @param props Props\n    // @param value the value to set to\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    // @dev the order executionFee\n    // @param props Props\n    // @return the order executionFee\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    // @dev the order callbackGasLimit\n    // @param props Props\n    // @return the order callbackGasLimit\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    // @dev set the order callbackGasLimit\n    // @param props Props\n    // @param value the value to set to\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    // @dev the order minOutputAmount\n    // @param props Props\n    // @return the order minOutputAmount\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minOutputAmount;\n    }\n\n    // @dev set the order minOutputAmount\n    // @param props Props\n    // @param value the value to set to\n    function setMinOutputAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minOutputAmount = value;\n    }\n\n    // @dev the order updatedAtBlock\n    // @param props Props\n    // @return the order updatedAtBlock\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtBlock;\n    }\n\n    // @dev set the order updatedAtBlock\n    // @param props Props\n    // @param value the value to set to\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtBlock = value;\n    }\n\n    // @dev the order updatedAtTime\n    // @param props Props\n    // @return the order updatedAtTime\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    // @dev set the order updatedAtTime\n    // @param props Props\n    // @param value the value to set to\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    // @dev whether the order is for a long or short\n    // @param props Props\n    // @return whether the order is for a long or short\n    function isLong(Props memory props) internal pure returns (bool) {\n        return props.flags.isLong;\n    }\n\n    // @dev set whether the order is for a long or short\n    // @param props Props\n    // @param value the value to set to\n    function setIsLong(Props memory props, bool value) internal pure {\n        props.flags.isLong = value;\n    }\n\n    // @dev whether to unwrap the native token before transfers to the user\n    // @param props Props\n    // @return whether to unwrap the native token before transfers to the user\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    // @dev set whether the native token should be unwrapped before being\n    // transferred to the receiver\n    // @param props Props\n    // @param value the value to set to\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n\n    // @dev whether the order is frozen\n    // @param props Props\n    // @return whether the order is frozen\n    function isFrozen(Props memory props) internal pure returns (bool) {\n        return props.flags.isFrozen;\n    }\n\n    // @dev set whether the order is frozen\n    // transferred to the receiver\n    // @param props Props\n    // @param value the value to set to\n    function setIsFrozen(Props memory props, bool value) internal pure {\n        props.flags.isFrozen = value;\n    }\n\n    function autoCancel(Props memory props) internal pure returns (bool) {\n        return props.flags.autoCancel;\n    }\n\n    function setAutoCancel(Props memory props, bool value) internal pure {\n        props.flags.autoCancel = value;\n    }\n\n    // @dev set the order.updatedAtBlock to the current block number\n    // @param props Props\n    function touch(Props memory props) internal view {\n        props.setUpdatedAtBlock(Chain.currentBlockNumber());\n        props.setUpdatedAtTime(Chain.currentTimestamp());\n    }\n}"
    },
    "contracts/libraries/gmx/Withdrawal.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.0;\n\n/**\n * @title Withdrawal\n * @dev Struct for withdrawals\n */\nlibrary Withdrawal {\n    // @dev there is a limit on the number of fields a struct can have when being passed\n    // or returned as a memory variable which can cause \"Stack too deep\" errors\n    // use sub-structs to avoid this issue\n    // @param addresses address values\n    // @param numbers number values\n    // @param flags boolean values\n    struct Props {\n        Addresses addresses;\n        Numbers numbers;\n        Flags flags;\n    }\n\n     // @param account The account to withdraw for.\n     // @param receiver The address that will receive the withdrawn tokens.\n     // @param callbackContract The contract that will be called back.\n     // @param uiFeeReceiver The ui fee receiver.\n     // @param market The market on which the withdrawal will be executed.\n    struct Addresses {\n        address account;\n        address receiver;\n        address callbackContract;\n        address uiFeeReceiver;\n        address market;\n        address[] longTokenSwapPath;\n        address[] shortTokenSwapPath;\n    }\n\n     // @param marketTokenAmount The amount of market tokens that will be withdrawn.\n     // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\n     // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\n     // @param updatedAtBlock The block at which the withdrawal was last updated.\n     // @param executionFee The execution fee for the withdrawal.\n     // @param callbackGasLimit The gas limit for calling the callback contract.\n    struct Numbers {\n        uint256 marketTokenAmount;\n        uint256 minLongTokenAmount;\n        uint256 minShortTokenAmount;\n        uint256 updatedAtBlock;\n        uint256 updatedAtTime;\n        uint256 executionFee;\n        uint256 callbackGasLimit;\n    }\n\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\n    struct Flags {\n        bool shouldUnwrapNativeToken;\n    }\n\n    function account(Props memory props) internal pure returns (address) {\n        return props.addresses.account;\n    }\n\n    function setAccount(Props memory props, address value) internal pure {\n        props.addresses.account = value;\n    }\n\n    function receiver(Props memory props) internal pure returns (address) {\n        return props.addresses.receiver;\n    }\n\n    function setReceiver(Props memory props, address value) internal pure {\n        props.addresses.receiver = value;\n    }\n\n    function callbackContract(Props memory props) internal pure returns (address) {\n        return props.addresses.callbackContract;\n    }\n\n    function setCallbackContract(Props memory props, address value) internal pure {\n        props.addresses.callbackContract = value;\n    }\n\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\n        return props.addresses.uiFeeReceiver;\n    }\n\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\n        props.addresses.uiFeeReceiver = value;\n    }\n\n    function market(Props memory props) internal pure returns (address) {\n        return props.addresses.market;\n    }\n\n    function setMarket(Props memory props, address value) internal pure {\n        props.addresses.market = value;\n    }\n\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.longTokenSwapPath;\n    }\n\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.longTokenSwapPath = value;\n    }\n\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\n        return props.addresses.shortTokenSwapPath;\n    }\n\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\n        props.addresses.shortTokenSwapPath = value;\n    }\n\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.marketTokenAmount;\n    }\n\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.marketTokenAmount = value;\n    }\n\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minLongTokenAmount;\n    }\n\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minLongTokenAmount = value;\n    }\n\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\n        return props.numbers.minShortTokenAmount;\n    }\n\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\n        props.numbers.minShortTokenAmount = value;\n    }\n\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtBlock;\n    }\n\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtBlock = value;\n    }\n\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\n        return props.numbers.updatedAtTime;\n    }\n\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\n        props.numbers.updatedAtTime = value;\n    }\n\n    function executionFee(Props memory props) internal pure returns (uint256) {\n        return props.numbers.executionFee;\n    }\n\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\n        props.numbers.executionFee = value;\n    }\n\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\n        return props.numbers.callbackGasLimit;\n    }\n\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\n        props.numbers.callbackGasLimit = value;\n    }\n\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\n        return props.flags.shouldUnwrapNativeToken;\n    }\n\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\n        props.flags.shouldUnwrapNativeToken = value;\n    }\n}"
    },
    "contracts/vaults/theseus/GmxCallback.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.18;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/gmx/IDepositCallbackReceiver.sol\";\nimport \"../../interfaces/gmx/IWithdrawalCallbackReceiver.sol\";\nimport \"../../interfaces/gmx/IOrderCallbackReceiver.sol\";\nimport \"../../interfaces/gmx/IGMXPlugin.sol\";\nimport \"../../interfaces/gmx/ICallbackContract.sol\";\nimport \"../../interfaces/vaults/IVault.sol\";\nimport \"../../interfaces/vaults/IVaultLocker.sol\";\n\n\n/**\n * @title GmxCallback\n * @dev Contract handling callbacks for deposit, withdrawal, and order execution/cancellation.\n */\ncontract GmxCallback is Ownable, IDepositCallbackReceiver, IWithdrawalCallbackReceiver, IOrderCallbackReceiver, ICallbackContract, IVaultLocker {\n    // Structure to hold the withdrawal information associated with a key\n    struct WithdrawalInfo {\n        uint256 lpAmount;\n        address receiver;\n    }\n\n    // Configuration struct for the contract\n    struct Config {\n        address vault;\n        address gmxPlugin;\n    }\n\n    // Mapping to store withdrawal data for each key\n    mapping(bytes32 => WithdrawalInfo) public withdrawalData;\n\n    // Configuration state\n    Config public config;\n\n    // Arrays to store keys for deposit, withdrawal, and order operations\n    bytes32[] public depositKeys;\n    bytes32[] public withdrawalKeys;\n    bytes32[] public orderKeys;\n\n    // Handlers for deposit, withdrawal, and order operations\n    address public depositHandler;\n    address public withdrawalHandler;\n    address public orderHandler;\n\n    event SetConfig(address _vault, address _gmxPlugin);\n    event SetHandler(address _depositHandler, address _withdrawalHandler, address _orderHandler);\n    event AddKey(bytes32 _key, State stateOption);\n    event AddWithdrawalData(bytes32 _withdrawalKey, uint256 _lpAmount, address _receiver);\n    event RemoveKey(bytes32 _key, State _stateOption);\n    event AfterDepositExecution(bytes32 _key);\n    event AfterDepositCancellation(bytes32 _key);\n    event AfterWithdrawalExecution(bytes32 _key);\n    event AfterWithdrawalCancellation(bytes32 _key);\n    event AfterOrderExecution(bytes32 _key);\n    event AfterOrderCancellation(bytes32 _key);\n    event AfterOrderFrozen(bytes32 _key);\n\n    // Modifier to restrict access to the GMX plugin only\n    modifier onlyGmxPlugin() {\n        require(msg.sender == config.gmxPlugin, \"Invalid caller\");\n        _;\n    }\n\n    // Modifier to restrict access to specific handlers (deposit, withdrawal, order)\n    modifier onlyHandler(State stateOption) {\n        address handler;\n        if (stateOption == State.Deposit) {\n            handler = depositHandler;\n        } else if (stateOption == State.Withdrawal) {\n            handler = withdrawalHandler;\n        } else if (stateOption == State.Order) {\n            handler = orderHandler;\n        } else {\n            revert(\"Invalid state\");\n        }\n        require(msg.sender == handler, \"Invalid caller\");\n        _;\n    }\n\n    /**\n     * @dev Constructor to initialize the contract with the vault and GMX plugin addresses.\n     * @param _vault Address of the vault.\n     * @param _gmxPlugin Address of the GMX plugin.\n     */\n    constructor(address _vault, address _gmxPlugin) Ownable(msg.sender) {\n        config = Config({\n            vault: _vault,\n            gmxPlugin: _gmxPlugin\n        });\n    }\n\n    /**\n     * @dev Updates the vault and GMX plugin addresses in the contract configuration.\n     * @param _vault New address of the vault.\n     * @param _gmxPlugin New address of the GMX plugin.\n     */\n    function setConfig(address _vault, address _gmxPlugin) external onlyOwner {\n        require(_vault != address(0) && _gmxPlugin != address(0), \"Invalid address\");\n\n        config = Config({\n            vault: _vault,\n            gmxPlugin: _gmxPlugin\n        });\n\n        emit SetConfig(_vault, _gmxPlugin);\n    }\n\n    /**\n     * @dev Updates the deposit, withdrawal, and order handlers in the contract.\n     * @param _depositHandler Address of the deposit handler.\n     * @param _withdrawalHandler Address of the withdrawal handler.\n     * @param _orderHandler Address of the order handler.\n     */\n    function setHandler(address _depositHandler, address _withdrawalHandler, address _orderHandler) external onlyOwner {\n        require(_depositHandler != address(0) && _withdrawalHandler != address(0) && _orderHandler != address(0), \"Invalid address\");\n\n        depositHandler = _depositHandler;\n        withdrawalHandler = _withdrawalHandler;\n        orderHandler = _orderHandler;\n\n        emit SetHandler(_depositHandler, _withdrawalHandler, _orderHandler);\n    }\n\n    /**\n     * @dev Adds a key to the corresponding array based on the state option (Deposit, Withdrawal, Order).\n     * @param _key The key to be added.\n     * @param _stateOption The state option (Deposit, Withdrawal, Order).\n     */\n    function addKey(bytes32 _key, State _stateOption) external onlyGmxPlugin {\n        if (_stateOption == State.Deposit) {\n            depositKeys.push(_key);\n        } else if (_stateOption == State.Withdrawal) {\n            withdrawalKeys.push(_key);\n        } else if (_stateOption == State.Order) {\n            orderKeys.push(_key);\n        } else {\n            revert(\"Invalid state\");\n        }\n\n        emit AddKey(_key, _stateOption);\n    }\n\n    /**\n     * @dev Adds withdrawal data for a specific key.\n     * @param _withdrawalKey The key associated with the withdrawal data.\n     * @param _lpAmount The LP amount to be withdrawn.\n     * @param _receiver The address to receive the LP tokens.\n     */\n    function addWithdrawalData(bytes32 _withdrawalKey, uint256 _lpAmount, address _receiver) external onlyGmxPlugin {\n        bool isExist = false;\n        for (uint256 i = 0; i < withdrawalKeys.length; ++i) {\n            if (withdrawalKeys[i] == _withdrawalKey) {\n                isExist = true;\n            }\n        }\n        require(isExist, \"Invalid withdrawal key\");\n        withdrawalData[_withdrawalKey] = WithdrawalInfo({\n            lpAmount: _lpAmount,\n            receiver: _receiver\n        });\n\n        emit AddWithdrawalData(_withdrawalKey, _lpAmount, _receiver);\n    }\n\n    /**\n     * @dev Retrieves an array of keys based on the state option (Deposit, Withdrawal, Order).\n     * @param stateOption The state option (Deposit, Withdrawal, Order).\n     * @return An array of keys associated with the specified state option.\n     */\n    function getKeys(State stateOption) public view returns (bytes32[] memory) {\n        if (stateOption == State.Deposit) {\n            return depositKeys;\n        } else if (stateOption == State.Withdrawal) {\n            return withdrawalKeys;\n        } else if (stateOption == State.Order) {\n            return orderKeys;\n        } else {\n            revert(\"Invalid state\");\n        }\n    }\n\n    function getWithdrawalDatas() public view returns (WithdrawalInfo[] memory) {\n        uint256 length = withdrawalKeys.length;\n        WithdrawalInfo[] memory result = new WithdrawalInfo[](length);\n\n        for(uint256 i = 0; i < length; i++) {\n            result[i] = withdrawalData[withdrawalKeys[i]];\n        }\n        return result;\n    }\n\n    /**\n     * @dev Removes a key from the corresponding array based on the state option (Deposit, Withdrawal, Order).\n     * @param _key The key to be removed.\n     * @param _stateOption The state option (Deposit, Withdrawal, Order).\n     */\n    function removeKey(bytes32 _key, State _stateOption) internal {\n        bytes32[] storage targetArray;\n\n        if (_stateOption == State.Deposit) {\n            targetArray = depositKeys;\n        } else if (_stateOption == State.Withdrawal) {\n            targetArray = withdrawalKeys;\n        } else if (_stateOption == State.Order) {\n            targetArray = orderKeys;\n        } else {\n            revert(\"Invalid state\");\n        }\n\n        uint256 length = targetArray.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (targetArray[i] == _key) {\n                // Found the element, now remove it\n                if (i < length - 1) {\n                    // Move the last element to the position of the element to be removed\n                    targetArray[i] = targetArray[length - 1];\n                }\n                // Remove the last element (which is now a duplicate or the original element)\n                targetArray.pop();\n\n                // You may choose to break here if you want to remove only the first occurrence\n                break;\n            }\n        }\n\n        emit RemoveKey(_key, _stateOption);\n    }\n\n    /**\n     * @dev Checks whether the contract is locked (i.e., no active deposit, withdrawal, or order).\n     * @return True if the contract is locked, false otherwise.\n     */\n    function getLockerStatus() public view returns (bool) {\n        return depositKeys.length == 0 && withdrawalKeys.length == 0 && orderKeys.length == 0;\n    }\n\n    /**\n     * @dev Handles actions after a deposit execution.\n     * @param key The key associated with the deposit.\n     * @param deposit The deposit details.\n     * @param eventData Additional event data.\n     */\n    function afterDepositExecution(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external onlyHandler(State.Deposit) {\n        removeKey(key, State.Deposit);\n        IGMXPlugin(config.gmxPlugin).transferAllTokensToVault();\n        \n        emit AfterDepositExecution(key);\n    }\n\n    /**\n     * @dev Handles actions after a deposit cancellation.\n     * @param key The key associated with the deposit.\n     * @param deposit The deposit details.\n     * @param eventData Additional event data.\n     */\n    function afterDepositCancellation(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external onlyHandler(State.Deposit) {\n        removeKey(key, State.Deposit);\n        IGMXPlugin(config.gmxPlugin).transferAllTokensToVault();\n        \n        emit AfterDepositCancellation(key);\n    }\n\n    /**\n     * @dev Handles actions after a withdrawal execution.\n     * @param key The key associated with the withdrawal.\n     * @param withdrawal The withdrawal details.\n     * @param eventData Additional event data.\n     */\n    function afterWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external onlyHandler(State.Withdrawal) {\n        removeKey(key, State.Withdrawal);\n        WithdrawalInfo memory info = withdrawalData[key];\n        if (info.lpAmount != 0) {\n            IVault(config.vault).burnLP(info.lpAmount);\n        }\n        delete withdrawalData[key];\n        IGMXPlugin(config.gmxPlugin).transferAllTokensToVault();\n        \n        emit AfterWithdrawalExecution(key);\n    }\n\n    /**\n     * @dev Handles actions after a withdrawal cancellation.\n     * @param key The key associated with the withdrawal.\n     * @param withdrawal The withdrawal details.\n     * @param eventData Additional event data.\n     */\n    function afterWithdrawalCancellation(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external onlyHandler(State.Withdrawal) {\n        removeKey(key, State.Withdrawal);\n        WithdrawalInfo memory info = withdrawalData[key];\n        if (info.lpAmount != 0 && info.receiver != address(0) && info.receiver != config.gmxPlugin) {\n            IVault(config.vault).transferLP(info.receiver, info.lpAmount);\n        }\n        delete withdrawalData[key];\n        IGMXPlugin(config.gmxPlugin).transferAllTokensToVault();\n\n        emit AfterWithdrawalCancellation(key);\n    }\n\n    /**\n     * @dev Handles actions after an order execution.\n     * @param key The key associated with the order.\n     * @param order The order details.\n     * @param eventData Additional event data.\n     */\n    function afterOrderExecution(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external onlyHandler(State.Order) {\n        removeKey(key, State.Order);\n        IGMXPlugin(config.gmxPlugin).transferAllTokensToVault();\n\n        emit AfterOrderExecution(key);\n    }\n\n    /**\n     * @dev Handles actions after an order cancellation.\n     * @param key The key associated with the order.\n     * @param order The order details.\n     * @param eventData Additional event data.\n     */\n    function afterOrderCancellation(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external onlyHandler(State.Order) {\n        removeKey(key, State.Order);\n        IGMXPlugin(config.gmxPlugin).transferAllTokensToVault();\n\n        emit AfterOrderCancellation(key);\n    }\n\n    /**\n     * @dev Handles actions after an order is frozen.\n     * @param key The key associated with the order.\n     * @param order The order details.\n     * @param eventData Additional event data.\n     */\n    function afterOrderFrozen(bytes32 key, Order.Props memory order, EventUtils.EventLogData memory eventData) external onlyHandler(State.Order) {\n        IGMXPlugin(config.gmxPlugin).transferAllTokensToVault();\n\n        emit AfterOrderFrozen(key);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}