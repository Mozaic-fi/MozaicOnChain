{
  "address": "0x8D9D41eE1184946B1db7586326603400C1b1e97B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_master",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenPriceConsumer",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "currentAllowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestedDecrease",
          "type": "uint256"
        }
      ],
      "name": "SafeERC20FailedDecreaseAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "AddAcceptedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "AddDepositAllowedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AddDepositRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pluginAddress",
          "type": "address"
        }
      ],
      "name": "AddPlugin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_poolId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "AddWithdrawalRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "ApproveTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum IPlugin.ActionType",
          "name": "_actionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "Execute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldMaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newMaster",
          "type": "address"
        }
      ],
      "name": "MasterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "RemoveAcceptedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "RemoveDepositAllowedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        }
      ],
      "name": "RemovePlugin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_poolId",
          "type": "uint8"
        }
      ],
      "name": "SelectPluginAndPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_depositMinExecFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawMinExecFee",
          "type": "uint256"
        }
      ],
      "name": "SetExecutionFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_chaindId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "SetLifiReceiverWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_protocolFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "SetProtocolFeePercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "SetTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_vaultLockers",
          "type": "address[]"
        }
      ],
      "name": "SetVaultLockers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_vaultManagers",
          "type": "address[]"
        }
      ],
      "name": "SetVaultManagers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_selectedPluginId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_selectedPoolId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "StakeToSelectedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldTokenPriceConsumer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTokenPriceConsumer",
          "type": "address"
        }
      ],
      "name": "TokenPriceConsumerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lpRate",
          "type": "uint256"
        }
      ],
      "name": "UpdateLiquidityProviderRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawProtocolFee",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ASSET_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BP_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIFI_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MOZAIC_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "acceptedTokenMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "acceptedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addAcceptedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addDepositAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "addDepositRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_pluginAddress",
          "type": "address"
        }
      ],
      "name": "addPlugin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_poolId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "addWithdrawalRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_bridge",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "bridgeViaLifi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "burnLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenValueUsd",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenAmountFromUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenValueInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertAssetToLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "convertDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertLPToAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositAllowedTokenMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositAllowedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositMinExecFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "enum IPlugin.ActionType",
          "name": "_actionType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAcceptedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLiquidityProviderRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositAllowedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        }
      ],
      "name": "getPlugin",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pluginAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "pluginId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.Plugin",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlugins",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pluginAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "pluginId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.Plugin[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPluginsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_poolId",
          "type": "uint8"
        }
      ],
      "name": "getPoolTokenInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimal",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_poolId",
          "type": "uint8"
        }
      ],
      "name": "getPoolTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_poolId",
          "type": "uint8"
        }
      ],
      "name": "getTokensByPluginAndPoolId",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isAcceptedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isDepositAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lifiReceiverWhiteList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWhiteListed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "master",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "pluginIdToIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "plugins",
      "outputs": [
        {
          "internalType": "address",
          "name": "pluginAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "pluginId",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeInVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeAcceptedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeDepositAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        }
      ],
      "name": "removePlugin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_poolId",
          "type": "uint8"
        }
      ],
      "name": "selectPluginAndPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectedPluginId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selectedPoolId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositMinExecFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawMinExecFee",
          "type": "uint256"
        }
      ],
      "name": "setExecutionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chaindId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setLifiReceiverWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMaster",
          "type": "address"
        }
      ],
      "name": "setMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenPriceConsumer",
          "type": "address"
        }
      ],
      "name": "setTokenPriceConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vaultLockers",
          "type": "address[]"
        }
      ],
      "name": "setVaultLockers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vaultManagers",
          "type": "address[]"
        }
      ],
      "name": "setVaultManagers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPriceConsumer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssetInUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalAsset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_pluginId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferExecutionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lpAmount",
          "type": "uint256"
        }
      ],
      "name": "transferLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultLockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultManagers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMinExecFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x00235684f2690a6f8ad6e818fded1d3039019b1ebbff16d0b31acb9e6203536b",
  "receipt": {
    "to": null,
    "from": "0x7E9BA79614FeC2C52e85842502df66A6dB107fde",
    "contractAddress": "0x8D9D41eE1184946B1db7586326603400C1b1e97B",
    "transactionIndex": 0,
    "gasUsed": "5502291",
    "logsBloom": "0x
    "blockHash": "0xf2e72fa48dc96564a3e84cd5105c31f00d98cde84fbfc8e5bc48085ca22303de",
    "transactionHash": "0x00235684f2690a6f8ad6e818fded1d3039019b1ebbff16d0b31acb9e6203536b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 35095458,
        "transactionHash": "0x00235684f2690a6f8ad6e818fded1d3039019b1ebbff16d0b31acb9e6203536b",
        "address": "0x8D9D41eE1184946B1db7586326603400C1b1e97B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e9ba79614fec2c52e85842502df66a6db107fde"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf2e72fa48dc96564a3e84cd5105c31f00d98cde84fbfc8e5bc48085ca22303de"
      }
    ],
    "blockNumber": 35095458,
    "cumulativeGasUsed": "5502291",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E9BA79614FeC2C52e85842502df66A6dB107fde",
    "0x7E9BA79614FeC2C52e85842502df66A6dB107fde",
    "0x429cb4481453e0C2D2BF7721d369c4bEB7d9f71E",
    "0x7E9BA79614FeC2C52e85842502df66A6dB107fde"
  ],
  "numDeployments": 1,
  "solcInputHash": "097c4d5db24419aa8d3f9715eaa779af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_master\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenPriceConsumer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"AddAcceptedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"AddDepositAllowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AddDepositRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pluginAddress\",\"type\":\"address\"}],\"name\":\"AddPlugin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"AddWithdrawalRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"ApproveTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum IPlugin.ActionType\",\"name\":\"_actionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"Execute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldMaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"MasterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemoveAcceptedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"RemoveDepositAllowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"}],\"name\":\"RemovePlugin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"}],\"name\":\"SelectPluginAndPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositMinExecFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawMinExecFee\",\"type\":\"uint256\"}],\"name\":\"SetExecutionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chaindId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"SetLifiReceiverWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SetProtocolFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_vaultLockers\",\"type\":\"address[]\"}],\"name\":\"SetVaultLockers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_vaultManagers\",\"type\":\"address[]\"}],\"name\":\"SetVaultManagers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_selectedPluginId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_selectedPoolId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"StakeToSelectedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldTokenPriceConsumer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTokenPriceConsumer\",\"type\":\"address\"}],\"name\":\"TokenPriceConsumerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lpRate\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityProviderRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawProtocolFee\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ASSET_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BP_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIFI_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOZAIC_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"acceptedTokenMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"acceptedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addAcceptedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addDepositAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"addDepositRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_pluginAddress\",\"type\":\"address\"}],\"name\":\"addPlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"addWithdrawalRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bridge\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"bridgeViaLifi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"burnLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenValueUsd\",\"type\":\"uint256\"}],\"name\":\"calculateTokenAmountFromUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTokenValueInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertAssetToLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"convertDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertLPToAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositAllowedTokenMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositAllowedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositMinExecFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"enum IPlugin.ActionType\",\"name\":\"_actionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAcceptedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLiquidityProviderRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAllowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"}],\"name\":\"getPlugin\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pluginId\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.Plugin\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlugins\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pluginId\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.Plugin[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPluginsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"}],\"name\":\"getPoolTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"}],\"name\":\"getTokensByPluginAndPoolId\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isAcceptedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isDepositAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lifiReceiverWhiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhiteListed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pluginIdToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plugins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pluginAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"pluginId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeInVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeAcceptedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeDepositAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"}],\"name\":\"removePlugin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_poolId\",\"type\":\"uint8\"}],\"name\":\"selectPluginAndPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectedPluginId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectedPoolId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositMinExecFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawMinExecFee\",\"type\":\"uint256\"}],\"name\":\"setExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chaindId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setLifiReceiverWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMaster\",\"type\":\"address\"}],\"name\":\"setMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenPriceConsumer\",\"type\":\"address\"}],\"name\":\"setTokenPriceConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaultLockers\",\"type\":\"address[]\"}],\"name\":\"setVaultLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaultManagers\",\"type\":\"address[]\"}],\"name\":\"setVaultManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceConsumer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssetInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAsset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pluginId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lpAmount\",\"type\":\"uint256\"}],\"name\":\"transferLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultLockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMinExecFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/theseus/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Pausable} from \\\"../../../utils/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20Pausable is ERC20, Pausable {\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\",\"keccak256\":\"0xc3a94ff6a613cc03d06048aebc8c72f209b3bbf34b6dd85a0d4b0f6423fd47aa\",\"license\":\"MIT\"},\"contracts/interfaces/lifi/ICalldataVerificationFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\ninterface ICalldataVerificationFacet {\\n\\n    /// @notice Extracts the main parameters from the calldata\\n    /// @param data The calldata to extract the main parameters from\\n    /// @return bridge The bridge extracted from the calldata\\n    /// @return sendingAssetId The sending asset id extracted from the calldata\\n    /// @return receiver The receiver extracted from the calldata\\n    /// @return amount The min amountfrom the calldata\\n    /// @return destinationChainId The destination chain id extracted from the calldata\\n    /// @return hasSourceSwaps Whether the calldata has source swaps\\n    /// @return hasDestinationCall Whether the calldata has a destination call\\n    function extractMainParameters(\\n        bytes calldata data\\n    )\\n        external\\n        pure\\n        returns (\\n            string memory bridge,\\n            address sendingAssetId,\\n            address receiver,\\n            uint256 amount,\\n            uint256 destinationChainId,\\n            bool hasSourceSwaps,\\n            bool hasDestinationCall\\n        );\\n\\n    /// @notice Extracts the generic swap parameters from the calldata\\n    /// @param data The calldata to extract the generic swap parameters from\\n    /// @return sendingAssetId The sending asset id extracted from the calldata\\n    /// @return amount The amount extracted from the calldata\\n    /// @return receiver The receiver extracted from the calldata\\n    /// @return receivingAssetId The receiving asset id extracted from the calldata\\n    /// @return receivingAmount The receiving amount extracted from the calldata\\n    function extractGenericSwapParameters(\\n        bytes calldata data\\n    )\\n        external\\n        pure\\n        returns (\\n            address sendingAssetId,\\n            uint256 amount,\\n            address receiver,\\n            address receivingAssetId,\\n            uint256 receivingAmount\\n        );\\n}\",\"keccak256\":\"0x59fb5a2139bf91a17805a0cfa535568fee96b066e12d40517f8831575aa513a5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/vaults/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Interface of the Plugin standard.\\n */\\ninterface IPlugin {\\n    enum ActionType {\\n        // Action types\\n        Stake,\\n        Unstake,\\n        SwapTokens,\\n        ClaimRewards,\\n        CancelAction\\n    }\\n\\n    function execute(ActionType _actionType, bytes calldata _payload) external payable;\\n    \\n    function getTotalLiquidity() external view returns (uint256);\\n\\n    function getPoolNumber() external view returns(uint256);\\n\\n    function getAllowedTokens(uint8 _poolId) external view returns (address[] memory tokens);\\n\\n    function getPoolTokenPrice(uint8 _poolId, bool _maximize) external view returns (int256);\\n\\n    function getPoolTokenInfo(uint8 _poolId) external view returns (address token, uint8 decimal, uint256 balance);\\n}\\n\",\"keccak256\":\"0x2913797eb265c229619fa53f0a3d168ea0f4ba7c5fe71fa07c0f33fa497a68c0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/vaults/IVaultLocker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\n\\ninterface IVaultLocker {\\n    function getLockerStatus() external view returns(bool);\\n}\",\"keccak256\":\"0x51ab8f9dd29394635bb145a3acb3eacaff1ece8b4fe18837db5ea83fa2b374d0\",\"license\":\"BUSL-1.1\"},\"contracts/vaults/TokenPriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract TokenPriceConsumer is Ownable {\\n    mapping(address => AggregatorV3Interface) private tokenPriceFeeds;\\n    \\n    mapping(address => uint256) private tokenHeartbeatDurations;\\n\\n    constructor(address[] memory tokenAddresses, address[] memory priceFeedAddresses, uint256[] memory heartbeatDurations) Ownable(msg.sender) {\\n        require(tokenAddresses.length == priceFeedAddresses.length, \\\"Arrays length mismatch\\\");\\n        require(tokenAddresses.length == heartbeatDurations.length, \\\"Arrays length mismatch\\\");\\n\\n\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            tokenPriceFeeds[tokenAddresses[i]] = AggregatorV3Interface(priceFeedAddresses[i]);\\n            tokenHeartbeatDurations[tokenAddresses[i]] = heartbeatDurations[i];\\n        }\\n    }\\n\\n    function addPriceFeed(address tokenAddress, address priceFeedAddress, uint256 heartbeatDuration) public onlyOwner {\\n        require(priceFeedAddress != address(0), \\\"Invalid address\\\");\\n        require(address(tokenPriceFeeds[tokenAddress]) == address(0), \\\"PriceFeed already exist\\\");\\n        tokenPriceFeeds[tokenAddress] = AggregatorV3Interface(priceFeedAddress);\\n        tokenHeartbeatDurations[tokenAddress] = heartbeatDuration;\\n\\n    }\\n\\n    function removePriceFeed(address tokenAddress) public onlyOwner {\\n        require(address(tokenPriceFeeds[tokenAddress]) != address(0), \\\"PriceFeed already exist\\\");\\n        delete tokenPriceFeeds[tokenAddress];\\n        delete tokenHeartbeatDurations[tokenAddress];\\n    }\\n\\n    function getTokenPrice(address tokenAddress) public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = tokenPriceFeeds[tokenAddress];\\n        require(address(priceFeed) != address(0), \\\"Price feed not found\\\");\\n\\n        (uint80 roundId, int256 answer, ,uint256 updatedAt  , ) = priceFeed.latestRoundData();\\n\\n        require(roundId != 0 && answer >= 0 && updatedAt != 0, \\\"PriceFeed: Sanity check\\\");\\n\\n        require(block.timestamp - updatedAt <= tokenHeartbeatDurations[tokenAddress], \\\"Price feed is stale\\\");\\n        \\n        // Token price might need additional scaling based on decimals\\n        return uint256(answer);\\n    }\\n\\n    function decimals(address tokenAddress) public view returns (uint8) {\\n        AggregatorV3Interface priceFeed = tokenPriceFeeds[tokenAddress];\\n        require(address(priceFeed) != address(0), \\\"Price feed not found\\\");\\n        return priceFeed.decimals();\\n    }\\n}\",\"keccak256\":\"0xab3f8ab621e16d1a40f75b821890d9be85991d35817e8693f25ec2d11bd65574\",\"license\":\"BUSL-1.1\"},\"contracts/vaults/theseus/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\\\";\\n\\n\\nimport \\\"../../interfaces/vaults/IPlugin.sol\\\";\\nimport \\\"../../interfaces/vaults/IVaultLocker.sol\\\";\\nimport \\\"../../interfaces/lifi/ICalldataVerificationFacet.sol\\\";\\nimport \\\"../TokenPriceConsumer.sol\\\";\\n\\n\\ncontract Vault is Ownable, ERC20, ERC20Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Constant representing the number of decimals for the MOZAIC token.\\n    uint256 public constant MOZAIC_DECIMALS = 6;\\n\\n    // Constant representing the number of decimals for the ASSET.\\n    uint256 public constant ASSET_DECIMALS = 36;\\n\\n    // A constant representing the denominator for basis points (BP). Used for percentage calculations.\\n    uint256 public constant BP_DENOMINATOR = 1e4;\\n\\n    // A constant representing the maximum fee percentage allowed (1000 basis points or 10% in this case).\\n    uint256 public constant MAX_FEE = 1e3;\\n\\n    // The Address of lifi contract\\n    address public constant LIFI_CONTRACT = 0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE;\\n\\n    // Struct defining the properties of a Plugin.\\n    struct Plugin {\\n        address pluginAddress;  // Address of the plugin contract.\\n        uint8 pluginId;       // Unique identifier for the plugin.\\n    }\\n    \\n    /* ========== STATE VARIABLES ========== */\\n    // Stores the address of the master contract.\\n    address public master;\\n\\n    // Stores the address of the contract admin.\\n    address public admin;\\n\\n    // Stores the address of the treasury, which is payable for receiving funds.\\n    address payable public treasury;\\n\\n    // Stores the address of the token price consumer contract.\\n    address public tokenPriceConsumer;\\n\\n    // Maps plugin IDs to their respective index.\\n    mapping(uint8 => uint256) public pluginIdToIndex;\\n\\n    // An array to store instances of the Plugin struct.\\n    Plugin[] public plugins;\\n\\n    // Maps token addresses to boolean values indicating whether the token is accepted.\\n    mapping(address => bool) public acceptedTokenMap;\\n\\n    // An array of accepted token addresses.\\n    address[] public acceptedTokens;\\n\\n    // Maps token addresses to boolean values indicating whether deposits are allowed for the token.\\n    mapping(address => bool) public depositAllowedTokenMap;\\n\\n    // An array of token addresses for which deposits are allowed.\\n    address[] public depositAllowedTokens;\\n\\n    // Stores the ID of the currently selected plugin.\\n    uint8 public selectedPluginId;\\n\\n    // Stores the ID of the currently selected pool.\\n    uint8 public selectedPoolId;\\n\\n    // An array of addresses representing users who can lock assets in the vault.\\n    address[] public vaultLockers;\\n\\n    // An array of addresses representing managers who have control over the vault.\\n    address[] public vaultManagers;\\n\\n    // A rate used to convert LP (Liquidity Provider) tokens to a standard decimal format (18 decimals in this case).\\n    uint256 public lpRate = 1e18;\\n\\n    // The percentage of fees collected by the protocol for each transaction.\\n    uint256 public protocolFeePercentage;\\n\\n    // The total protocol fee held in the vault.\\n    uint256 public protocolFeeInVault;\\n\\n    // The minimum execution fee required when depositing funds into the vault.\\n    uint256 public depositMinExecFee;\\n\\n    // The minimum execution fee required when withdrawing funds from the vault.\\n    uint256 public withdrawMinExecFee;\\n\\n    struct lifiWhiteListReceiver {\\n        uint256 chainId;\\n        bool isWhiteListed;\\n    }\\n    // The list of addresses that can receive funds from the vault via lifi bridge.\\n    mapping(address => lifiWhiteListReceiver) public lifiReceiverWhiteList;\\n\\n\\n    /* ========== EVENTS ========== */\\n    event AddPlugin(uint8 _pluginId, address _pluginAddress);\\n    event RemovePlugin(uint8 _pluginId);\\n    event Execute(uint8 _pluginId, IPlugin.ActionType _actionType, bytes _payload);\\n    event MasterUpdated(address _oldMaster, address _newMaster);\\n    event AdminUpdated(address _oldAdmin, address _newAdmin);\\n    event TokenPriceConsumerUpdated(address _oldTokenPriceConsumer, address _newTokenPriceConsumer);\\n    event SetTreasury(address payable treasury);\\n    event SetProtocolFeePercentage(uint256 _protocolFeePercentage);\\n    event SetExecutionFee(uint256 _depositMinExecFee, uint256 _withdrawMinExecFee);\\n    event SetVaultLockers(address[] _vaultLockers);\\n    event SetVaultManagers(address[] _vaultManagers);\\n    event UpdateLiquidityProviderRate(uint256 _previousRate, uint256 _lpRate);\\n    event AddAcceptedToken(address _token);\\n    event RemoveAcceptedToken(address _token);\\n    event AddDepositAllowedToken(address _token);\\n    event RemoveDepositAllowedToken(address _token);\\n    event AddDepositRequest(address _token, uint256 _amount);\\n    event AddWithdrawalRequest(uint256 _lpAmount, uint8 _pluginId, uint8 _poolId, address _receiver);\\n    event SelectPluginAndPool(uint8 _pluginId, uint8 _poolId);\\n    event ApproveTokens(uint8 _pluginId, address[] _tokens, uint256[] _amounts);\\n    event WithdrawProtocolFee(address _token, uint256 _amount);\\n    event StakeToSelectedPool(uint8 _selectedPluginId, uint8 _selectedPoolId, address _token, uint256 _tokenAmount);\\n    event SetLifiReceiverWhiteList(address _receiver, uint256 _chaindId, bool _status);\\n\\n\\n    /* ========== MODIFIERS ========== */\\n    // Modifier allowing only the master contract to execute the function.\\n    modifier onlyMaster() {\\n        require(msg.sender == master, \\\"Vault: caller must be master\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Vault: caller must be admin\\\");\\n        _;\\n    }\\n\\n\\n    // Modifier allowing only the vault lockers to execute the function.\\n    modifier onlyVaultLockers() {\\n        bool isVaultLocker = false;\\n        for(uint256 i  = 0; i < vaultLockers.length; i++) {\\n            if(vaultLockers[i] == msg.sender) {\\n                isVaultLocker = true;\\n                break;\\n            }\\n        }\\n        require(isVaultLocker, \\\"Vault: Invalid vault locker\\\");\\n        _;\\n    }\\n\\n    // Modifier allowing only the vault managers to execute the function.\\n    modifier onlyVaultManagers() {\\n        bool isVaultManager = false;\\n        for(uint256 i  = 0; i < vaultManagers.length; i++) {\\n            if(vaultManagers[i] == msg.sender) {\\n                isVaultManager = true;\\n                break;\\n            }\\n        }\\n        require(isVaultManager, \\\"Vault: Invalid vault manager\\\");\\n        _;\\n    }\\n\\n    /* ========== CONFIGURATION ========== */\\n    // Constructor for the Mozaic Theseus LPToken contract, inheriting from ERC20.\\n    constructor(address _master,address _admin, address _tokenPriceConsumer, address payable _treasury) ERC20(\\\"Mozaic Theseus LP\\\", \\\"MOZ-THE-LP\\\") Ownable(msg.sender){\\n        require(_master != address(0), \\\"Vault: Invalid Address\\\");\\n        require(_admin != address(0), \\\"Vault: Invalid Address\\\");\\n        require(_tokenPriceConsumer != address(0), \\\"Vault: Invalid Address\\\");\\n        require(_treasury != address(0), \\\"Vault: Invalid Address\\\");\\n\\n        master = _master;\\n        tokenPriceConsumer = _tokenPriceConsumer;\\n        treasury = _treasury;\\n        admin = _admin;\\n\\n        lifiReceiverWhiteList[address(this)] = lifiWhiteListReceiver(block.chainid, true);\\n\\n        lifiReceiverWhiteList[treasury] = lifiWhiteListReceiver(block.chainid, true);\\n    }\\n\\n    // Allows the owner to set a new master address for the Vault.\\n    function setMaster(address _newMaster) external onlyOwner {\\n        // Ensure that the new master address is valid.\\n        require(_newMaster != address(0), \\\"Vault: Invalid Address\\\");\\n\\n        // Store the current master address before updating.\\n        address _oldMaster = master;\\n\\n        // Update the master address to the new value.\\n        master = _newMaster;\\n\\n        // Emit an event to log the master address update.\\n        emit MasterUpdated(_oldMaster, _newMaster);\\n    }\\n\\n    // Allows the owner to set a new admin address for the Vault.\\n    function setAdmin(address _newAdmin) external onlyOwner {\\n        // Ensure that the new admin address is valid.\\n        require(_newAdmin != address(0), \\\"Vault: Invalid Address\\\");\\n\\n        // Store the current admin address before updating.\\n        address _oldAdmin = admin;\\n\\n        // Update the admin address to the new value.\\n        admin = _newAdmin;\\n\\n        // Emit an event to log the admin address update.\\n        emit MasterUpdated(_oldAdmin, _newAdmin);\\n    }\\n\\n    // Allows the owner to set the address of the token price consumer contract.\\n    function setTokenPriceConsumer(address _tokenPriceConsumer) public onlyOwner {\\n        // Ensure that the new token price consumer address is valid.\\n        require(_tokenPriceConsumer != address(0), \\\"Vault: Invalid Address\\\");\\n\\n        // Store the current token price consumer address before updating.\\n        address _oldTokenPriceConsumer = tokenPriceConsumer;\\n\\n        // Update the token price consumer address to the new value.\\n        tokenPriceConsumer = _tokenPriceConsumer;\\n\\n        // Emit an event to log the token price consumer address update.\\n        emit TokenPriceConsumerUpdated(_oldTokenPriceConsumer, _tokenPriceConsumer);\\n    }\\n\\n    // Allows the owner to set the address of the treasury.\\n    function setTreasury(address payable _treasury) public onlyOwner {\\n        // Ensure that the new treasury address is valid.\\n        require(_treasury != address(0), \\\"Vault: Invalid address\\\");\\n\\n        // Update the treasury address to the new value.\\n        treasury = _treasury;\\n\\n        // Emit an event to log the treasury address update.\\n        emit SetTreasury(_treasury);\\n    }\\n\\n    // Allows the owner to whitelist/remove from whitelist addresses that can receive funds from the vault via lifi bridge.\\n    function setLifiReceiverWhiteList(address _receiver,uint256 _chaindId, bool _status) public onlyOwner {\\n        lifiReceiverWhiteList[_receiver] = lifiWhiteListReceiver(_chaindId, _status);\\n        emit SetLifiReceiverWhiteList(_receiver, _chaindId, _status);\\n    }\\n\\n    // Allows the master contract to select a plugin and pool.\\n    function selectPluginAndPool(uint8 _pluginId, uint8 _poolId) onlyAdmin public {\\n        // Set the selectedPluginId and selectedPoolId to the provided values.\\n        selectedPluginId = _pluginId;\\n        selectedPoolId = _poolId;\\n        emit SelectPluginAndPool(_pluginId, _poolId);\\n    }\\n\\n    // Sets the execution fees for deposit and withdrawal transactions.\\n    function setExecutionFee(uint256 _depositMinExecFee, uint256 _withdrawMinExecFee) public onlyAdmin {\\n        // Set the deposit minimum execution fee\\n        depositMinExecFee = _depositMinExecFee;\\n\\n        // Set the withdrawal minimum execution fee\\n        withdrawMinExecFee = _withdrawMinExecFee;\\n\\n        // Emit an event to log the changes in execution fees\\n        emit SetExecutionFee(_depositMinExecFee, _withdrawMinExecFee);\\n    }\\n\\n\\n    // Allows the owner to add a new accepted token.\\n    function addAcceptedToken(address _token) external onlyOwner {\\n        // Check if the token does not already exist in the accepted tokens mapping.\\n        if (acceptedTokenMap[_token] == false) {\\n            // Set the token as accepted, add it to the acceptedTokens array, and emit an event.\\n            acceptedTokenMap[_token] = true;\\n            acceptedTokens.push(_token);\\n            emit AddAcceptedToken(_token);\\n        } else {\\n            // Revert if the token already exists in the accepted tokens.\\n            revert(\\\"Vault: Token already exists.\\\");\\n        }\\n    }\\n\\n    // Allows the owner to remove an accepted token.\\n    function removeAcceptedToken(address _token) external onlyOwner {\\n        // Check if the token exists in the accepted tokens mapping.\\n        if (acceptedTokenMap[_token] == true) {\\n            // Set the token as not accepted, remove it from the acceptedTokens array, and emit an event.\\n            acceptedTokenMap[_token] = false;\\n            for (uint256 i = 0; i < acceptedTokens.length; ++i) {\\n                if (acceptedTokens[i] == _token) {\\n                    acceptedTokens[i] = acceptedTokens[acceptedTokens.length - 1];\\n                    acceptedTokens.pop();\\n                    emit RemoveAcceptedToken(_token);\\n                    return;\\n                }\\n            }\\n        }\\n        // Revert if the token does not exist in the accepted tokens.\\n        revert(\\\"Vault: Non-accepted token.\\\");\\n    }\\n\\n    // Allows the owner to add a new deposit allowed token.\\n    function addDepositAllowedToken(address _token) external onlyOwner {\\n        // Check if the token does not already exist in the deposit allowed tokens mapping.\\n        if (depositAllowedTokenMap[_token] == false) {\\n            // Set the token as allowed for deposit, add it to the depositAllowedTokens array, and emit an event.\\n            depositAllowedTokenMap[_token] = true;\\n            depositAllowedTokens.push(_token);\\n            emit AddDepositAllowedToken(_token);\\n        } else {\\n            // Revert if the token already exists in the deposit allowed tokens.\\n            revert(\\\"Vault: Token already exists.\\\");\\n        }\\n    }\\n\\n    // Allows the owner to remove a deposit allowed token.\\n    function removeDepositAllowedToken(address _token) external onlyOwner {\\n        // Check if the token exists in the deposit allowed tokens mapping.\\n        if (depositAllowedTokenMap[_token] == true) {\\n            // Set the token as not allowed for deposit, remove it from the depositAllowedTokens array, and emit an event.\\n            depositAllowedTokenMap[_token] = false;\\n            for (uint256 i = 0; i < depositAllowedTokens.length; ++i) {\\n                if (depositAllowedTokens[i] == _token) {\\n                    depositAllowedTokens[i] = depositAllowedTokens[depositAllowedTokens.length - 1];\\n                    depositAllowedTokens.pop();\\n                    emit RemoveDepositAllowedToken(_token);\\n                    return;\\n                }\\n            }\\n        }\\n        // Revert if the token does not exist in the deposit allowed tokens.\\n        revert(\\\"Vault: Non-deposit allowed token.\\\");\\n    }\\n\\n    // Allows the owner to add a new plugin to the vault.\\n    function addPlugin(uint8 _pluginId, address _pluginAddress) external onlyOwner {\\n        // Ensure that the pluginId is not zero and does not already exist.\\n        require(_pluginId != 0, \\\"Vault: PluginId cannot be zero\\\");\\n        require(pluginIdToIndex[_pluginId] == 0, \\\"Plugin with this ID already exists\\\");\\n\\n        // Create a new Plugin instance and add it to the plugins array.\\n        plugins.push(Plugin(_pluginAddress, _pluginId));\\n        \\n        // Update the mapping with the index of the added plugin.\\n        pluginIdToIndex[_pluginId] = plugins.length;\\n\\n        // Emit an event to log the addition of a new plugin.\\n        emit AddPlugin(_pluginId, _pluginAddress);\\n    }\\n\\n    // Allows the owner to remove a plugin from the vault.\\n    function removePlugin(uint8 _pluginId) external onlyOwner {\\n        // Ensure that the pluginId exists.\\n        require(pluginIdToIndex[_pluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n        // Get the index of the plugin in the array.\\n        uint256 pluginIndex = pluginIdToIndex[_pluginId] - 1;\\n        \\n        // Delete the mapping entry for the removed plugin.\\n        delete pluginIdToIndex[_pluginId];\\n\\n        if (pluginIndex != plugins.length - 1) {\\n            // If the removed plugin is not the last one, replace it with the last plugin in the array.\\n            Plugin memory lastPlugin = plugins[plugins.length - 1];\\n            plugins[pluginIndex] = lastPlugin;\\n            pluginIdToIndex[lastPlugin.pluginId] = pluginIndex + 1;\\n        }\\n\\n        // Remove the last element from the array.\\n        plugins.pop();\\n\\n        // Emit an event to log the removal of a plugin.\\n        emit RemovePlugin(_pluginId);\\n    }\\n\\n    // Function to set the protocol fee percentage. Only callable by the owner of the contract.\\n    function setProtocolFeePercentage(uint256 _protocolFeePercentage) external onlyOwner {\\n        // Ensure that the provided protocol fee percentage does not exceed the maximum allowed fee.\\n        require(_protocolFeePercentage <= MAX_FEE, \\\"Vault: protocol fee exceeds the max fee\\\");\\n        \\n        // Update the protocol fee percentage.\\n        protocolFeePercentage = _protocolFeePercentage;\\n\\n        // Emit an event to log the change in protocol fee percentage.\\n        emit SetProtocolFeePercentage(_protocolFeePercentage);\\n    }\\n\\n    // Function to set the addresses of users who can lock assets in the vault. Only callable by the owner.\\n    function setVaultLockers(address[] memory _vaultLockers) external onlyOwner {\\n        // Update the array of vault lockers with the provided addresses.\\n        vaultLockers = _vaultLockers;\\n\\n        // Emit an event to log the update of vault lockers with the provided addresses.\\n        emit SetVaultLockers(_vaultLockers);\\n    }\\n\\n    // Function to set the addresses of managers who have control over the vault. Only callable by the owner.\\n    function setVaultManagers(address[] memory _vaultManagers) external onlyOwner {\\n        // Update the array of vault managers with the provided addresses.\\n        vaultManagers = _vaultManagers;\\n\\n        // Emit an event to log the update of vault managers with the provided addresses.\\n        emit SetVaultManagers(_vaultManagers);\\n\\n    }\\n\\n    /* ========== USER FUNCTIONS ========== */\\n    \\n    // Allows users to initiate a deposit request by converting tokens to LP tokens and staking them into the selected pool.\\n    function addDepositRequest(address _token, uint256 _tokenAmount, address _receiver, bytes memory _payload) external payable nonReentrant whenNotPaused {\\n        require(getVaultStatus() == true, \\\"Vault: Vault is locked\\\");\\n\\n        require(msg.value >= depositMinExecFee, \\\"Vault: Insufficient execution fee\\\");\\n\\n        // Ensure the deposited token is allowed for deposit in the vault.\\n        require(isDepositAllowedToken(_token), \\\"Vault: Invalid token\\\");\\n        \\n        // Update the current liquidity provider rate\\n        updateLiquidityProviderRate();\\n\\n        // Ensure a valid and positive token amount is provided.\\n        require(_tokenAmount > 0, \\\"Vault: Invalid token amount\\\");\\n\\n        // Calculate the USD value of the deposited tokens.\\n        uint256 amountUsd = calculateTokenValueInUsd(_token, _tokenAmount);\\n\\n        require(amountUsd >= 10 ** (ASSET_DECIMALS - 2), \\\"Invalid token amount\\\");\\n\\n        // Convert the USD value to the corresponding LP token amount.\\n        uint256 lpAmountToMint = convertAssetToLP(amountUsd);\\n\\n        // Ensure that there is a sufficient LP amount to mint.\\n        require(lpAmountToMint > 0, \\\"Vault: Insufficient amount\\\");\\n\\n        // Transfer the deposited tokens from the user to the vault.\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        // Mint the calculated LP tokens and send them to the user.\\n        _mint(_receiver, lpAmountToMint);\\n\\n        // Emit an event to log the deposit request.\\n        emit AddDepositRequest(_token, _tokenAmount);\\n\\n        // Stake the minted LP tokens to the selected pool.\\n        stakeToSelectedPool(_token, _tokenAmount, _payload);\\n    }\\n\\n\\n    // Internal function to stake a specified token amount to the selected pool using the configured plugin.\\n    function stakeToSelectedPool(address _token, uint256 _tokenAmount, bytes memory _payload) internal {\\n        // Retrieve the list of allowed tokens for the selected plugin and pool.\\n        address[] memory allowedTokens = getTokensByPluginAndPoolId(selectedPluginId, selectedPoolId);\\n\\n        // Iterate through the allowed tokens to find the matching token.\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            if (allowedTokens[i] == _token) {\\n                // Create an array to represent token amounts, with the target token's amount set accordingly.\\n                uint256[] memory _amounts = new uint256[](allowedTokens.length);\\n                _amounts[i] = _tokenAmount;\\n\\n                // Encode the payload for the 'Stake' action using the selected plugin and pool.\\n                bytes memory payload = abi.encode(uint8(selectedPoolId), allowedTokens, _amounts, _payload);\\n\\n                // Ensure that the specified plugin exists.\\n                require(pluginIdToIndex[selectedPluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n                // Retrieve the plugin address based on the provided plugin ID.\\n                address plugin = plugins[pluginIdToIndex[selectedPluginId] - 1].pluginAddress;\\n\\n                // Increase the allowance for the plugin to spend the specified token amount.\\n                IERC20(allowedTokens[i]).safeIncreaseAllowance(plugin, _tokenAmount);\\n\\n                // Execute the specified action on the plugin with the provided payload.\\n                IPlugin(plugin).execute(IPlugin.ActionType.Stake, payload);\\n                \\n                emit StakeToSelectedPool(selectedPluginId, selectedPoolId, _token, _tokenAmount);\\n                // Exit the function after successfully staking the token.\\n                return;\\n            }\\n        }     \\n        revert(\\\"Vault: deposit token not in allowedTokens\\\");\\n    }\\n\\n    // Function to add a withdrawal request for a specified LP token amount from a selected pool using a specified plugin.\\n    function addWithdrawalRequest(uint256 _lpAmount, uint8 _pluginId, uint8 _poolId, address _receiver, bytes memory payload) external payable whenNotPaused nonReentrant{\\n        // Ensure that the vault is not locked before processing withdrawal requests.\\n        require(getVaultStatus() == true, \\\"Vault: Vault is locked\\\");\\n\\n        // Ensure that the user has provided sufficient execution fee for the withdrawal.\\n        require(msg.value >= withdrawMinExecFee, \\\"Vault: Insufficient execution fee\\\");\\n\\n        // Ensure a valid and positive LP token amount is provided for withdrawal.\\n        require(_lpAmount > 0, \\\"Vault: Invalid LP token amount\\\");\\n\\n        // Update the current liquidity provider rate\\n        updateLiquidityProviderRate();\\n\\n        // Transfer the specified amount of LP tokens from the user to the contract.\\n        this.transferFrom(msg.sender, address(this), _lpAmount);\\n\\n        // Convert the LP token amount to its equivalent USD value.\\n        uint256 usdAmountToWithdraw = convertLPToAsset(_lpAmount);\\n\\n        // Retrieve information about the selected pool token, including its decimals and price.\\n        (, uint8 poolTokenDecimals, ) = getPoolTokenInfo(_pluginId, _poolId);\\n\\n        // Get the current price of the pool token.\\n        uint256 poolTokenPrice = getPoolTokenPrice(_pluginId, _poolId);\\n\\n        // Calculate the amount of pool tokens equivalent to the USD value of the LP token withdrawal.\\n        uint256 poolTokenAmount = convertDecimals(usdAmountToWithdraw, 6, poolTokenDecimals) / poolTokenPrice;\\n\\n        // Encode the payload for the 'Unstake' action using the specified pool and LP token details.\\n        bytes memory _payload = abi.encode(_poolId, poolTokenAmount, _lpAmount, _receiver, payload);\\n\\n        // Ensure that the specified plugin exists.\\n        require(pluginIdToIndex[_pluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n        // Retrieve the plugin address based on the provided plugin ID.\\n        address plugin = plugins[pluginIdToIndex[_pluginId] - 1].pluginAddress;\\n\\n        // Execute the 'Unstake' action on the plugin with the provided payload.\\n        IPlugin(plugin).execute(IPlugin.ActionType.Unstake, _payload);\\n\\n        emit AddWithdrawalRequest(_lpAmount, _pluginId, _poolId,  _receiver);\\n    }\\n\\n    // Function to get the current price of the pool token for a specified pool using a specified plugin.\\n    function getPoolTokenPrice(uint8 _pluginId, uint8 _poolId) public view returns (uint256) {\\n        // Ensure that the specified plugin exists.\\n        require(pluginIdToIndex[_pluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n        // Retrieve the plugin address based on the provided plugin ID.\\n        address plugin = plugins[pluginIdToIndex[_pluginId] - 1].pluginAddress;\\n\\n        // Call the external function on the specified plugin to get the pool token price.\\n        int256 tokenPrice = IPlugin(plugin).getPoolTokenPrice(_poolId, true);\\n\\n        // Ensure that the retrieved token price is positive.\\n        require(tokenPrice > 0, \\\"Vault: Pool token price is negative.\\\");\\n\\n        // Convert the token price to an unsigned integer and return it.\\n        return uint256(tokenPrice);\\n    }\\n\\n    // Function to get information about the pool token, including its address, decimals, and balance for a specified pool using a specified plugin.\\n    function getPoolTokenInfo(uint8 _pluginId, uint8 _poolId) public view returns (address token, uint8 decimal, uint256 balance) {\\n        // Ensure that the specified plugin exists.\\n        require(pluginIdToIndex[_pluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n        // Retrieve the plugin address based on the provided plugin ID.\\n        address plugin = plugins[pluginIdToIndex[_pluginId] - 1].pluginAddress;\\n\\n        // Call the external function on the specified plugin to get the pool token information.\\n        return IPlugin(plugin).getPoolTokenInfo(_poolId);\\n    }\\n\\n    \\n    /* ========== MASTER FUNCTIONS ========== */\\n    \\n    // Allows the master contract to execute actions on a specified plugin.\\n    function execute(uint8 _pluginId, IPlugin.ActionType _actionType, bytes memory _payload) public onlyMaster nonReentrant whenNotPaused{\\n        // Ensure that the specified plugin exists.\\n        require(pluginIdToIndex[_pluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n        // Retrieve the plugin address based on the provided plugin ID.\\n        address plugin = plugins[pluginIdToIndex[_pluginId] - 1].pluginAddress;\\n\\n        // If the action type is 'Stake', approve tokens for staking according to the payload.\\n        if (_actionType == IPlugin.ActionType.Stake) {\\n            (, address[] memory _tokens, uint256[] memory _amounts, ) = abi.decode(_payload, (uint8, address[], uint256[], bytes));\\n            require(_tokens.length == _amounts.length, \\\"Vault: Lists must have the same length\\\");\\n\\n            // Iterate through the tokens and approve them for staking.\\n            for (uint256 i; i < _tokens.length; ++i) {\\n                if (_amounts[i] > 0) {\\n                    IERC20(_tokens[i]).safeIncreaseAllowance(plugin, _amounts[i]);\\n                }\\n            }\\n        } else if (_actionType == IPlugin.ActionType.Unstake) {\\n            ( , , , address receiver, ) = abi.decode(_payload, (uint8, uint256, uint256, address, bytes));\\n\\n            // Ensure that the receiver address is the vault itself.\\n            require(receiver == address(this), \\\"Invalid receiver\\\");\\n        }\\n\\n        // Execute the specified action on the plugin with the provided payload.\\n        IPlugin(plugin).execute(_actionType, _payload);\\n\\n        // Emit an event to log the execution of the plugin action.\\n        emit Execute(_pluginId, _actionType, _payload);\\n    }\\n\\n    // Allows the master contract to approve tokens for a specified plugin based on the provided payload.\\n    function approveTokens(uint8 _pluginId, address[] memory _tokens, uint256[] memory _amounts) external onlyMaster nonReentrant whenNotPaused {\\n        // Ensure that the specified plugin exists.\\n        require(pluginIdToIndex[_pluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n        // Retrieve the plugin address based on the provided plugin ID.\\n        address plugin = plugins[pluginIdToIndex[_pluginId] - 1].pluginAddress;\\n\\n        // Decode the payload to obtain the list of tokens and corresponding amounts to approve.\\n        // (address[] memory _tokens, uint256[] memory _amounts) = abi.decode(_payload, (address[], uint256[]));\\n        require(_tokens.length == _amounts.length, \\\"Vault: Lists must have the same length\\\");\\n\\n        // Iterate through the tokens and approve them for the plugin.\\n        for (uint256 i; i < _tokens.length; ++i) {\\n            IERC20(_tokens[i]).safeIncreaseAllowance(plugin, _amounts[i]);\\n        }\\n        emit ApproveTokens(_pluginId, _tokens, _amounts);\\n    }\\n\\n    // Updates the liquidity provider rate based on the current market rate.\\n    function updateLiquidityProviderRate() internal {\\n        // Store the previous liquidity provider rate\\n        uint256 previousRate = lpRate;\\n        \\n        // Calculate the current liquidity provider rate from external source\\n        uint256 currentRate = getCurrentLiquidityProviderRate();\\n        \\n        // Check if the current rate is higher than the previous rate\\n        if (currentRate > previousRate) {\\n            // Calculate the change in rate and update total profit\\n            uint256 deltaRate = currentRate - previousRate;\\n        \\n            // Calculate total profit in the protocol's base asset\\n            uint256 totalProfit = convertDecimals(deltaRate * totalSupply(), 18 + MOZAIC_DECIMALS, ASSET_DECIMALS);\\n            \\n            // Calculate protocol fee as a percentage of total profit\\n            uint256 protocolFee = (totalProfit * protocolFeePercentage) / (BP_DENOMINATOR);\\n            \\n            // Accumulate protocol fee in the vault\\n            protocolFeeInVault += protocolFee;\\n\\n            // Update the liquidity provider rate\\n            lpRate = getCurrentLiquidityProviderRate();\\n        } else {\\n            // Update the liquidity provider rate directly\\n            lpRate = currentRate;\\n        }\\n\\n        // Emit an event to log the update in liquidity provider rate\\n        emit UpdateLiquidityProviderRate(previousRate, lpRate);\\n    }\\n\\n    // Withdraws protocol fees stored in the vault for a specific token.\\n    function withdrawProtocolFee(address _token) external onlyMaster nonReentrant whenNotPaused {\\n        require(isAcceptedToken(_token), \\\"Vault: Invalid token\\\");\\n\\n        // Calculate the token amount from the protocol fee in the vault\\n        uint256 tokenAmount = calculateTokenAmountFromUsd(_token, protocolFeeInVault);\\n\\n        // Get the token balance of this contract\\n        uint256 tokenBalance = IERC20(_token).balanceOf(address(this));\\n\\n        // Determine the transfer amount, ensuring it doesn't exceed the token balance\\n        uint256 transferAmount = tokenBalance >= tokenAmount ? tokenAmount : tokenBalance;\\n\\n        if(tokenAmount != 0) {        \\n            // Update the protocol fee in the vault after the withdrawal\\n            protocolFeeInVault = protocolFeeInVault - ((protocolFeeInVault * transferAmount) / (tokenAmount));\\n\\n            // Safely transfer the tokens to the treasury address\\n            IERC20(_token).safeTransfer(treasury, transferAmount);\\n        }\\n        \\n        // Emit an event to log the withdrawal\\n        emit WithdrawProtocolFee(_token, transferAmount);\\n    }\\n\\n    // Transfers the execution fee to the specified plugin.\\n    function transferExecutionFee(uint8 _pluginId, uint256 _amount) external onlyMaster nonReentrant whenNotPaused {\\n        // Retrieve information about the specified plugin\\n        Plugin memory plugin = getPlugin(_pluginId);\\n        \\n        // Check if the contract has sufficient balance for the transfer\\n        require(_amount <= address(this).balance, \\\"Vault: Insufficient balance\\\");\\n        \\n        // Attempt to transfer Ether to the plugin's address\\n        (bool success, ) = plugin.pluginAddress.call{value: _amount}(\\\"\\\");\\n        \\n        // Revert if the Ether transfer to the plugin fails\\n        require(success, \\\"Vault: Failed to send Ether\\\");\\n    }\\n \\n     function bridgeViaLifi(\\n        address _srcToken,\\n        uint256 _amount,\\n        uint256 _value,\\n        bool _bridge,\\n        bytes calldata _data\\n    ) external onlyMaster nonReentrant {\\n\\n        if(_bridge) {\\n            ( , , address receiver, , uint256 destinationChainId, , ) = ICalldataVerificationFacet(LIFI_CONTRACT).extractMainParameters(_data);\\n            lifiWhiteListReceiver memory receiverInfo = lifiReceiverWhiteList[receiver];\\n            require(receiverInfo.isWhiteListed &&  receiverInfo.chainId == destinationChainId, \\\"Vault: Lifi receiver not whitelisted\\\");\\n        } else {\\n            ( , , address receiver, , ) = ICalldataVerificationFacet(LIFI_CONTRACT).extractGenericSwapParameters(_data);\\n            lifiWhiteListReceiver memory receiverInfo = lifiReceiverWhiteList[receiver];\\n            require(receiverInfo.isWhiteListed && receiverInfo.chainId == block.chainid, \\\"Vault: Lifi receiver not whitelisted\\\");\\n        }\\n\\n        bool isNative = (_srcToken == address(0));\\n        if (!isNative) {           \\n            uint256 currentAllowance = IERC20(_srcToken).allowance(address(this), address(LIFI_CONTRACT));\\n            if (_amount > currentAllowance) {\\n                uint256 increaseAmount = _amount - currentAllowance;\\n                IERC20(_srcToken).safeIncreaseAllowance(address(LIFI_CONTRACT), increaseAmount);\\n            } else if (_amount < currentAllowance) {\\n                uint256 decreaseAmount = currentAllowance - _amount;\\n                IERC20(_srcToken).safeDecreaseAllowance(address(LIFI_CONTRACT), decreaseAmount);\\n            }\\n        }\\n        (bool success,) = LIFI_CONTRACT.call{value: _value}(_data);\\n        require(success, \\\"Lifi: call failed\\\");\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // Retrieve the array of plugins registered in the vault.\\n    function getPlugins() public view returns (Plugin[] memory) {\\n        return plugins;\\n    }\\n\\n    // Retrieve the total count of registered plugins in the vault.\\n    function getPluginsCount() public view returns (uint256) {\\n        return plugins.length;\\n    }\\n\\n    // Retrieve details about a specific plugin based on its unique identifier.\\n    function getPlugin(uint8 _pluginId) public view returns (Plugin memory) {\\n        // Ensure that the specified plugin exists.\\n        require(pluginIdToIndex[_pluginId] != 0, \\\"Plugin with this ID does not exist\\\");\\n\\n        // Retrieve and return details about the specified plugin.\\n        Plugin memory plugin = plugins[pluginIdToIndex[_pluginId] - 1];\\n        return plugin;\\n    }\\n\\n    // Retrieves the current liquidity provider rate.\\n    function getCurrentLiquidityProviderRate() public view returns(uint256) {\\n        uint256 _totalAssets = totalAssetInUsd() > protocolFeeInVault ? totalAssetInUsd() - protocolFeeInVault: 0;\\n        \\n        // Variable to store the current rate\\n        uint256 currentRate;\\n\\n         // Check if total supply or total assets is zero\\n        if (_totalAssets <= 10 ** ASSET_DECIMALS || totalSupply() <= 10 ** MOZAIC_DECIMALS) {\\n            currentRate = 1e18;\\n        } else {\\n            // Convert total assets to the desired decimals\\n            uint256 adjustedAssets = convertDecimals(_totalAssets, ASSET_DECIMALS, MOZAIC_DECIMALS + 18);\\n\\n            // Calculate the current rate\\n            currentRate = adjustedAssets / totalSupply();\\n        }\\n        return currentRate;\\n    }\\n\\n    // Calculate the total value of assets held by the vault, including liquidity from registered plugins\\n    // and the USD value of accepted tokens held in the vault.\\n    function totalAssetInUsd() public view returns (uint256 _totalAsset) {\\n        require(getVaultStatus() == true, \\\"Vault: Vault is locked\\\");\\n\\n        // Iterate through registered plugins to calculate their total liquidity.\\n        for (uint8 i; i < plugins.length; ++i) {\\n            _totalAsset += IPlugin(plugins[i].pluginAddress).getTotalLiquidity();\\n        }\\n\\n        // Iterate through accepted tokens to calculate their total USD value.\\n        for (uint256 i; i < acceptedTokens.length; ++i) {\\n            // Calculate the USD value of the token based on its balance in the vault.\\n            _totalAsset += calculateTokenValueInUsd(acceptedTokens[i], IERC20(acceptedTokens[i]).balanceOf(address(this)));\\n        }\\n\\n        // Return the total calculated asset value.\\n        return _totalAsset + 10 ** ASSET_DECIMALS;\\n    }\\n\\n    // Check if a given token is accepted by the vault.\\n    function isAcceptedToken(address _token) public view returns (bool) {\\n        return acceptedTokenMap[_token];\\n    }\\n\\n    // Check if a given token is allowed for deposit in the vault.\\n    function isDepositAllowedToken(address _token) public view returns (bool) {\\n        return depositAllowedTokenMap[_token];\\n    }\\n\\n    function getAcceptedTokens() public view returns (address[] memory) {\\n        return acceptedTokens;\\n    }\\n\\n    function getDepositAllowedTokens() public view returns (address[] memory) {\\n        return depositAllowedTokens;\\n    }\\n\\n    // Retrieve the list of tokens allowed for a specific pool associated with a plugin.\\n    // Returns an array of token addresses based on the provided plugin and pool IDs.\\n    function getTokensByPluginAndPoolId(uint8 _pluginId, uint8 _poolId) public view returns (address[] memory) {\\n        // Initialize an array to store the allowed tokens for the specified pool.\\n        address[] memory poolAllowedTokens;\\n\\n        // If the specified plugin does not exist, return an empty array.\\n        if (pluginIdToIndex[_pluginId] == 0) {\\n            return poolAllowedTokens;\\n        }\\n\\n        // Retrieve the plugin information based on the provided plugin ID.\\n        Plugin memory plugin = plugins[pluginIdToIndex[_pluginId] - 1];\\n\\n        // Retrieve the allowed tokens for the specified pool from the associated plugin.\\n        poolAllowedTokens = IPlugin(plugin.pluginAddress).getAllowedTokens(_poolId);\\n\\n        // Return the array of allowed tokens for the specified pool.\\n        return poolAllowedTokens;\\n    }\\n\\n    // Function to get the status of the vault, indicating whether it is locked or unlocked.\\n    function getVaultStatus() public view returns (bool) {\\n        // Initialize the status as true, assuming the vault is initially unlocked.\\n        bool status = true;\\n\\n        // Iterate through the array of vault lockers to check their individual status.\\n        for(uint256 i = 0; i < vaultLockers.length; i++) {\\n            // Check the status of the current vault locker.\\n            if(IVaultLocker(vaultLockers[i]).getLockerStatus() == false) {\\n                // If any vault locker reports that it is locked, set the overall vault status to false and exit the loop.\\n                status = false;\\n                break;\\n            }\\n        }\\n\\n        // Return the overall status of the vault.\\n        return status;\\n    }\\n\\n    /* ========== HELPER FUNCTIONS ========== */\\n\\n    // Calculate the USD value of a given token amount based on its price and decimals.\\n    function calculateTokenValueInUsd(address _tokenAddress, uint256 _tokenAmount) public view returns (uint256) {\\n        // Retrieve the token and price consumer decimals.\\n        uint256 tokenDecimals = IERC20Metadata(_tokenAddress).decimals();\\n        uint256 priceConsumerDecimals = TokenPriceConsumer(tokenPriceConsumer).decimals(_tokenAddress);\\n\\n        // Retrieve the token price from the price consumer.\\n        uint256 tokenPrice = TokenPriceConsumer(tokenPriceConsumer).getTokenPrice(_tokenAddress);\\n\\n        return convertDecimals(_tokenAmount * tokenPrice, tokenDecimals + priceConsumerDecimals, ASSET_DECIMALS);\\n    }\\n\\n    // Calculate the token amount corresponding to a given USD value based on token price and decimals.\\n    function calculateTokenAmountFromUsd(address _tokenAddress, uint256 _tokenValueUsd) public view returns (uint256) {\\n        // Retrieve the token and price consumer decimals.\\n        uint256 tokenDecimals = IERC20Metadata(_tokenAddress).decimals();\\n        uint256 priceConsumerDecimals = TokenPriceConsumer(tokenPriceConsumer).decimals(_tokenAddress);\\n\\n        // Convert the USD value to the desired ASSET_DECIMALS.\\n        uint256 normalizedValue = convertDecimals(_tokenValueUsd, ASSET_DECIMALS, tokenDecimals + priceConsumerDecimals);\\n\\n        // Calculate the token amount based on the normalized value and token price.\\n        uint256 tokenAmount = normalizedValue / TokenPriceConsumer(tokenPriceConsumer).getTokenPrice(_tokenAddress);\\n\\n        // Return the calculated token amount.\\n        return tokenAmount;\\n    }\\n\\n    /* ========== CONVERT FUNCTIONS ========== */\\n\\n    // Convert an amount from one decimal precision to another.\\n    function convertDecimals(uint256 _amount, uint256 _from, uint256 _to) public pure returns (uint256) {\\n        // If the source decimal precision is greater than or equal to the target, perform division.\\n        if (_from >= _to) {\\n            return _amount / 10 ** (_from - _to);\\n        } else {\\n            // If the target decimal precision is greater than the source, perform multiplication.\\n            return _amount * 10 ** (_to - _from);\\n        }\\n    }\\n\\n    // Convert an asset amount to LP tokens based on the current total asset and total LP token supply.\\n    function convertAssetToLP(uint256 _amount) public view returns (uint256) {\\n        // If the total asset is zero, perform direct decimal conversion.\\n        uint256 _totalAssetInUsd = totalAssetInUsd() > protocolFeeInVault ?  totalAssetInUsd() - protocolFeeInVault : 0;\\n        if (_totalAssetInUsd <= 10 ** ASSET_DECIMALS || totalSupply() <= 10 ** MOZAIC_DECIMALS) {\\n            return convertDecimals(_amount, ASSET_DECIMALS, MOZAIC_DECIMALS);\\n        }\\n        \\n        // Perform conversion based on the proportion of the provided amount to the total asset.\\n        return (_amount * totalSupply()) / _totalAssetInUsd;\\n    }\\n\\n    // Convert LP tokens to an equivalent asset amount based on the current total asset and total LP token supply.\\n    function convertLPToAsset(uint256 _amount) public view returns (uint256) {\\n        uint256 _totalAssetInUsd = totalAssetInUsd() > protocolFeeInVault ?  totalAssetInUsd() - protocolFeeInVault : 0;\\n\\n        // If the total LP token supply is zero, perform direct decimal conversion.\\n        if (_totalAssetInUsd <= 10 ** ASSET_DECIMALS || totalSupply() <= 10 ** MOZAIC_DECIMALS) {\\n            return convertDecimals(_amount, MOZAIC_DECIMALS, ASSET_DECIMALS);\\n        }\\n        // Perform conversion based on the proportion of the provided amount to the total LP token supply.\\n        return (_amount * _totalAssetInUsd) / totalSupply();\\n    }\\n\\n    // Retrieve the decimal precision of the token (MOZAIC_DECIMALS).\\n    function decimals() public view virtual override returns (uint8) {\\n        return uint8(MOZAIC_DECIMALS);\\n    }\\n\\n    // Function to get the total supply of the LP tokens, including an additional fixed supply represented by 10^MOZAIC_DECIMALS.\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Retrieve the original total supply from the parent contract and add an additional fixed supply.\\n        return super.totalSupply() + 10 ** MOZAIC_DECIMALS;\\n    }\\n\\n    // Function to burn a specified amount of LP tokens. Only callable by vault managers.\\n    function burnLP(uint256 _lpAmount) external onlyVaultManagers {\\n        // Burn the specified amount of LP tokens from the contract's balance.\\n        _burn(address(this), _lpAmount);\\n    }\\n\\n    // Function to transfer a specified amount of LP tokens to a given account. Only callable by vault managers.\\n    function transferLP(address _account, uint256 _lpAmount) external onlyVaultManagers {\\n        // Transfer the specified amount of LP tokens from the contract to the target account.\\n        this.transfer(_account, _lpAmount);\\n    }\\n\\n    /* ========== TREASURY FUNCTIONS ========== */\\n    receive() external payable {}\\n    // Fallback function is called when msg.data is not empty\\n    fallback() external payable {}\\n    \\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    /* ========== Pausable ========== */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        override(ERC20, ERC20Pausable)\\n    {\\n        super._update(from, to, value);\\n    }\\n}\",\"keccak256\":\"0x88a1f33c81f98a95c59e57937d7fb01a8c6e62a1fe5d799f1f55fe9f52e375c8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a76400006015553480156200001d57600080fd5b506040516200621c3803806200621c833981016040819052620000409162000338565b604080518082018252601181527004d6f7a6169632054686573657573204c5607c1b6020808301919091528251808401909352600a83526904d4f5a2d5448452d4c560b41b90830152903380620000b257604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000bd81620002cf565b506004620000cc838262000447565b506005620000db828262000447565b50506006805460ff191690555060016007556001600160a01b038416620001345760405162461bcd60e51b81526020600482015260166024820152600080516020620061fc8339815191526044820152606401620000a9565b6001600160a01b0383166200017b5760405162461bcd60e51b81526020600482015260166024820152600080516020620061fc8339815191526044820152606401620000a9565b6001600160a01b038216620001c25760405162461bcd60e51b81526020600482015260166024820152600080516020620061fc8339815191526044820152606401620000a9565b6001600160a01b038116620002095760405162461bcd60e51b81526020600482015260166024820152600080516020620061fc8339815191526044820152606401620000a9565b600880546001600160a01b03199081166001600160a01b0396871617909155600b8054821693861693909317909255600a80548316918516919091178155600980549092169284169290921790556040805180820182524680825260016020808401828152306000908152601a808452878220965187559151958401805460ff1990811697151597909717905586518088018852948552848301848152975490981688529052929094209351845591519201805490911691151591909117905562000513565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200033557600080fd5b50565b600080600080608085870312156200034f57600080fd5b84516200035c816200031f565b60208601519094506200036f816200031f565b604086015190935062000382816200031f565b606086015190925062000395816200031f565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620003cb57607f821691505b602082108103620003ec57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000442576000816000526020600020601f850160051c810160208610156200041d5750805b601f850160051c820191505b818110156200043e5782815560010162000429565b5050505b505050565b81516001600160401b03811115620004635762000463620003a0565b6200047b81620004748454620003b6565b84620003f2565b602080601f831160018114620004b357600084156200049a5750858301515b600019600386901b1c1916600185901b1785556200043e565b600085815260208120601f198616915b82811015620004e457888601518255948401946001909101908401620004c3565b5085821015620005035787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b615cd980620005236000396000f3fe6080604052600436106104735760003560e01c806379d0f55e11610248578063c6ef206111610138578063ee97f7f3116100bb578063f4db898411610082578063f4db898414610ec0578063f851a44014610ed5578063fb55ab7d14610ef5578063fd1e663e14610f15578063ff74ea7e14610f28578063fffbcefd14610f3d57005b8063ee97f7f314610dff578063f0a317eb14610e1f578063f0f4426014610e60578063f12ffcbd14610e80578063f2fde38b14610ea057005b8063dbc7a95d116100ff578063dbc7a95d14610ce7578063dd62ed3e14610d07578063de37adaa14610d4d578063e731ecfa14610d99578063e78afc8d14610dc657005b8063c6ef206114610c5f578063d21d0c2514610c7f578063d44c403014610c92578063d8134a2314610ca7578063d8a5e93614610cc757005b8063abe685cd116101cb578063b773fdc111610192578063b773fdc114610baf578063b9c5cb0514610bcf578063bb1ae35214610bef578063bb809bfa14610c0f578063bc063e1a14610c2f578063c5607b9914610c4557005b8063abe685cd14610b2e578063aede67ea14610b44578063af8db57514610b59578063b0c2515314610b79578063b6ef57d314610b9957005b80638e50e5091161020f5780638e50e50914610aa157806395d89b4114610ab7578063a2d869b214610acc578063a7888a3414610aee578063a9059cbb14610b0e57005b806379d0f55e14610a015780637bc59ce514610a2e5780637d23426514610a4e5780638456cb5914610a6e5780638da5cb5b14610a8357005b8063313ce5671161036357806360e97ccd116102e65780636f732c67116102ad5780636f732c6714610940578063704b6c021461095657806370a0823114610976578063715018a6146109ac57806371d6f669146109c157806374e72b69146109e157005b806360e97ccd146108ab57806361d027b3146108cb57806363315e4e146108eb5780636615171314610901578063668fb6dc1461092057005b80633b6e750f1161032a5780633b6e750f146108055780633eee83f11461083e5780633f4ba83a1461085e5780635c975abb146108735780635e1e77de1461088b57005b8063313ce5671461075357806336a605031461077557806336c877541461079557806337e43105146107b55780633acbb182146107d557005b80631b47298a116103f657806326fae0d3116103bd57806326fae0d3146106b357806327824675146106d357806327a02914146106f357806328863bd314610713578063296f6c8c146107285780632f7570061461073e57005b80631b47298a146105da5780631c6e0cae146106215780632236d2fd1461064357806323b872dd14610673578063260239411461069357005b80630fd7907b1161043a5780630fd7907b1461054a578063108e3c991461056a57806312065fe014610592578063160c6e29146105a557806318160ddd146105c557005b8063056049581461047c578063061ce77d1461049c57806306fdde03146104c057806308447586146104e2578063095ea7b31461051a57005b3661047a57005b005b34801561048857600080fd5b5061047a610497366004614bde565b610f5d565b3480156104a857600080fd5b50600d545b6040519081526020015b60405180910390f35b3480156104cc57600080fd5b506104d561107d565b6040516104b79190614c5a565b3480156104ee57600080fd5b50600b54610502906001600160a01b031681565b6040516001600160a01b0390911681526020016104b7565b34801561052657600080fd5b5061053a610535366004614bde565b61110f565b60405190151581526020016104b7565b34801561055657600080fd5b506104ad610565366004614c7c565b611129565b34801561057657600080fd5b50610502731231deb6f5749ef6ce6943a275a1d3e7486f4eae81565b34801561059e57600080fd5b50476104ad565b3480156105b157600080fd5b5061047a6105c0366004614cb5565b611273565b3480156105d157600080fd5b506104ad6113bc565b3480156105e657600080fd5b506105fa6105f5366004614c7c565b6113dc565b604080516001600160a01b03909416845260ff9092166020840152908201526060016104b7565b34801561062d57600080fd5b506106366114cc565b6040516104b79190614d18565b34801561064f57600080fd5b5061053a61065e366004614d2b565b600e6020526000908152604090205460ff1681565b34801561067f57600080fd5b5061053a61068e366004614d48565b61152d565b34801561069f57600080fd5b5061047a6106ae366004614c7c565b611553565b3480156106bf57600080fd5b5061047a6106ce366004614d2b565b61160b565b3480156106df57600080fd5b506104ad6106ee366004614d89565b611693565b3480156106ff57600080fd5b5061047a61070e366004614db5565b6116e1565b34801561071f57600080fd5b506104ad600681565b34801561073457600080fd5b506104ad60185481565b34801561074a57600080fd5b5061063661177b565b34801561075f57600080fd5b5060065b60405160ff90911681526020016104b7565b34801561078157600080fd5b506104ad610790366004614bde565b6117db565b3480156107a157600080fd5b506105026107b0366004614dd7565b61195c565b3480156107c157600080fd5b5061047a6107d0366004614d2b565b611986565b3480156107e157600080fd5b5061053a6107f0366004614d2b565b60106020526000908152604090205460ff1681565b34801561081157600080fd5b5061053a610820366004614d2b565b6001600160a01b03166000908152600e602052604090205460ff1690565b34801561084a57600080fd5b5061047a610859366004614d2b565b611b5d565b34801561086a57600080fd5b5061047a611c6e565b34801561087f57600080fd5b5060065460ff1661053a565b34801561089757600080fd5b5061047a6108a6366004614df0565b611c80565b3480156108b757600080fd5b5061047a6108c6366004614e2c565b611e16565b3480156108d757600080fd5b50600a54610502906001600160a01b031681565b3480156108f757600080fd5b506104ad60175481565b34801561090d57600080fd5b5060125461076390610100900460ff1681565b34801561092c57600080fd5b5061047a61093b366004614d2b565b612216565b34801561094c57600080fd5b506104ad60195481565b34801561096257600080fd5b5061047a610971366004614d2b565b6123d9565b34801561098257600080fd5b506104ad610991366004614d2b565b6001600160a01b031660009081526001602052604090205490565b3480156109b857600080fd5b5061047a612461565b3480156109cd57600080fd5b506105026109dc366004614dd7565b612473565b3480156109ed57600080fd5b506105026109fc366004614dd7565b612483565b348015610a0d57600080fd5b50610a21610a1c366004614ed5565b612493565b6040516104b79190614ef2565b348015610a3a57600080fd5b5061047a610a49366004614ff6565b612546565b348015610a5a57600080fd5b506104ad610a69366004614bde565b6126cd565b348015610a7a57600080fd5b5061047a61284b565b348015610a8f57600080fd5b506000546001600160a01b0316610502565b348015610aad57600080fd5b506104ad60165481565b348015610ac357600080fd5b506104d561285b565b348015610ad857600080fd5b50610ae161286a565b6040516104b791906150c1565b348015610afa57600080fd5b5061047a610b09366004614d2b565b6128e0565b348015610b1a57600080fd5b5061053a610b29366004614bde565b612968565b348015610b3a57600080fd5b506104ad61271081565b348015610b5057600080fd5b5061053a612976565b348015610b6557600080fd5b5061047a610b74366004615124565b612a2b565b348015610b8557600080fd5b50610502610b94366004614dd7565b612a76565b348015610ba557600080fd5b506104ad60155481565b348015610bbb57600080fd5b506104ad610bca366004614dd7565b612a86565b348015610bdb57600080fd5b506104ad610bea366004614dd7565b612b11565b348015610bfb57600080fd5b5061047a610c0a3660046151d0565b612b93565b348015610c1b57600080fd5b5061047a610c2a366004614d2b565b612e1f565b348015610c3b57600080fd5b506104ad6103e881565b348015610c5157600080fd5b506012546107639060ff1681565b348015610c6b57600080fd5b5061047a610c7a366004614dd7565b612ee1565b61047a610c8d366004615235565b612f8f565b348015610c9e57600080fd5b506104ad613265565b348015610cb357600080fd5b5061047a610cc2366004614d2b565b613434565b348015610cd357600080fd5b5061047a610ce2366004614dd7565b6135fe565b348015610cf357600080fd5b5061047a610d02366004615124565b61369d565b348015610d1357600080fd5b506104ad610d223660046152b3565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b348015610d5957600080fd5b50610d84610d68366004614d2b565b601a602052600090815260409020805460019091015460ff1682565b604080519283529015156020830152016104b7565b348015610da557600080fd5b506104ad610db4366004614ed5565b600c6020526000908152604090205481565b348015610dd257600080fd5b5061053a610de1366004614d2b565b6001600160a01b031660009081526010602052604090205460ff1690565b348015610e0b57600080fd5b50600854610502906001600160a01b031681565b348015610e2b57600080fd5b50610e3f610e3a366004614dd7565b6136e8565b604080516001600160a01b03909316835260ff9091166020830152016104b7565b348015610e6c57600080fd5b5061047a610e7b366004614d2b565b61371d565b348015610e8c57600080fd5b50610636610e9b366004614c7c565b6137c2565b348015610eac57600080fd5b5061047a610ebb366004614d2b565b6138c0565b348015610ecc57600080fd5b506104ad602481565b348015610ee157600080fd5b50600954610502906001600160a01b031681565b348015610f0157600080fd5b5061047a610f10366004614ed5565b6138fb565b61047a610f233660046152d1565b613abb565b348015610f3457600080fd5b506104ad613d0d565b348015610f4957600080fd5b5061047a610f5836600461533c565b613da8565b6000805b601454811015610fb357336001600160a01b031660148281548110610f8857610f8861537e565b6000918252602090912001546001600160a01b031603610fab5760019150610fb3565b600101610f61565b50806110065760405162461bcd60e51b815260206004820152601c60248201527f5661756c743a20496e76616c6964207661756c74206d616e616765720000000060448201526064015b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b038416600482015260248101839052309063a9059cbb906044016020604051808303816000875af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110779190615394565b50505050565b60606004805461108c906153b1565b80601f01602080910402602001604051908101604052809291908181526020018280546110b8906153b1565b80156111055780601f106110da57610100808354040283529160200191611105565b820191906000526020600020905b8154815290600101906020018083116110e857829003601f168201915b5050505050905090565b60003361111d818585613e38565b60019150505b92915050565b60ff82166000908152600c6020526040812054810361115a5760405162461bcd60e51b8152600401610ffd906153e5565b60ff83166000908152600c6020526040812054600d9061117c9060019061543d565b8154811061118c5761118c61537e565b60009182526020822001546040516396c1865b60e01b815260ff86166004820152600160248201526001600160a01b03909116925082906396c1865b90604401602060405180830381865afa1580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d9190615450565b90506000811361126b5760405162461bcd60e51b8152602060048201526024808201527f5661756c743a20506f6f6c20746f6b656e207072696365206973206e6567617460448201526334bb329760e11b6064820152608401610ffd565b949350505050565b6008546001600160a01b0316331461129d5760405162461bcd60e51b8152600401610ffd90615469565b6112a5613e45565b6112ad613e6f565b60006112b883612493565b90504782111561130a5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a20496e73756666696369656e742062616c616e636500000000006044820152606401610ffd565b80516040516000916001600160a01b03169084908381818185875af1925050503d8060008114611356576040519150601f19603f3d011682016040523d82523d6000602084013e61135b565b606091505b50509050806113ac5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a204661696c656420746f2073656e6420457468657200000000006044820152606401610ffd565b50506113b86001600755565b5050565b60006113ca6006600a615584565b6003546113d79190615590565b905090565b60ff82166000908152600c60205260408120548190819081036114115760405162461bcd60e51b8152600401610ffd906153e5565b60ff85166000908152600c6020526040812054600d906114339060019061543d565b815481106114435761144361537e565b60009182526020909120015460405163189f5a0360e11b815260ff871660048201526001600160a01b039091169150819063313eb40690602401606060405180830381865afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be91906155a3565b935093509350509250925092565b6060601180548060200260200160405190810160405280929190818152602001828054801561110557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611506575050505050905090565b60003361153b858285613e93565b611546858585613f0b565b60019150505b9392505050565b6009546001600160a01b031633146115ad5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a2063616c6c6572206d7573742062652061646d696e00000000006044820152606401610ffd565b6012805460ff84811661ffff199092168217610100918516918202179092556040805191825260208201929092527f14e1b7912db93ec92d8f90ef7bd11f9f3e0102207772767f99efb2d09652708e91015b60405180910390a15050565b611613613f6a565b6001600160a01b0381166116395760405162461bcd60e51b8152600401610ffd906155e6565b600880546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fad86f1a43fee68be483e267b534abff158fe4e9b790f2de1188ffe2671231c3491016115ff565b60008183106116c2576116a6828461543d565b6116b190600a615584565b6116bb9085615616565b905061154c565b6116cc838361543d565b6116d790600a615584565b6116bb9085615638565b6009546001600160a01b0316331461173b5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a2063616c6c6572206d7573742062652061646d696e00000000006044820152606401610ffd565b6018829055601981905560408051838152602081018390527fa110b587ac7535a0f2355180833c95160b4dde91ead092742efaf8d33d1d3db991016115ff565b6060600f805480602002602001604051908101604052809291908181526020018280548015611105576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611506575050505050905090565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611840919061564f565b600b54604051636a24d41960e11b81526001600160a01b03878116600483015260ff9390931693506000929091169063d449a83290602401602060405180830381865afa158015611895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b9919061564f565b600b54604051630681320d60e51b81526001600160a01b03888116600483015260ff9390931693506000929091169063d02641a090602401602060405180830381865afa15801561190e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119329190615450565b90506119526119418287615638565b61194b8486615590565b6024611693565b9695505050505050565b600f818154811061196c57600080fd5b6000918252602090912001546001600160a01b0316905081565b61198e613f6a565b6001600160a01b03811660009081526010602052604090205460ff161515600103611b08576001600160a01b0381166000908152601060205260408120805460ff191690555b601154811015611b0657816001600160a01b0316601182815481106119fb576119fb61537e565b6000918252602090912001546001600160a01b031603611afe5760118054611a259060019061543d565b81548110611a3557611a3561537e565b600091825260209091200154601180546001600160a01b039092169183908110611a6157611a6161537e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506011805480611aa057611aa061566c565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03841681527fb3b812909278685b51bb62950331b6fd26f7ce72a6cd192c9ece03f6ee398f5291016115ff565b6001016119d4565b505b60405162461bcd60e51b815260206004820152602160248201527f5661756c743a204e6f6e2d6465706f73697420616c6c6f77656420746f6b656e6044820152601760f91b6064820152608401610ffd565b50565b611b65613f6a565b6001600160a01b0381166000908152600e602052604081205460ff1615159003611c26576001600160a01b0381166000818152600e60209081526040808320805460ff19166001908117909155600f805491820181559093527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290920180546001600160a01b0319168417905590519182527f8d12536a26e1c757d393b039469ce97499ed4a5c39f067cd950f9295a269061b91015b60405180910390a150565b60405162461bcd60e51b815260206004820152601c60248201527f5661756c743a20546f6b656e20616c7265616479206578697374732e000000006044820152606401610ffd565b611c76613f6a565b611c7e613f97565b565b611c88613f6a565b8160ff16600003611cdb5760405162461bcd60e51b815260206004820152601e60248201527f5661756c743a20506c7567696e49642063616e6e6f74206265207a65726f00006044820152606401610ffd565b60ff82166000908152600c602052604090205415611d465760405162461bcd60e51b815260206004820152602260248201527f506c7567696e2077697468207468697320494420616c72656164792065786973604482015261747360f01b6064820152608401610ffd565b6040805180820182526001600160a01b03808416825260ff8086166020808501828152600d8054600181018255600082815297517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb590910180549351909616600160a01b026001600160a81b0319909316961695909517179092559154918352600c90529082902055517f82928e1181db449ef41e256af411debe6548a93bdb7b4cd3cc064bba2424f4ee906115ff908490849060ff9290921682526001600160a01b0316602082015260400190565b6008546001600160a01b03163314611e405760405162461bcd60e51b8152600401610ffd90615469565b611e48613e45565b8215611f4557604051630770551960e51b81526000908190731231deb6f5749ef6ce6943a275a1d3e7486f4eae9063ee0aa32090611e8c9087908790600401615682565b600060405180830381865afa158015611ea9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ed191908101906156e1565b50506001600160a01b0383166000908152601a60209081526040918290208251808401909352805483526001015460ff1615801591830182905294985091965094509250611f2190505750805182145b611f3d5760405162461bcd60e51b8152600401610ffd90615795565b50505061202d565b60405163618c776d60e11b8152600090731231deb6f5749ef6ce6943a275a1d3e7486f4eae9063c318eeda90611f819086908690600401615682565b60a060405180830381865afa158015611f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc291906157d9565b50506001600160a01b0381166000908152601a60209081526040918290208251808401909352805483526001015460ff16158015918301829052929550909350915061200e5750805146145b61202a5760405162461bcd60e51b8152600401610ffd90615795565b50505b6001600160a01b038616158061214a57604051636eb1769f60e11b8152306004820152731231deb6f5749ef6ce6943a275a1d3e7486f4eae60248201526000906001600160a01b0389169063dd62ed3e90604401602060405180830381865afa15801561209e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c29190615450565b9050808711156121085760006120d8828961543d565b90506121026001600160a01b038a16731231deb6f5749ef6ce6943a275a1d3e7486f4eae83613fe9565b50612148565b8087101561214857600061211c888361543d565b90506121466001600160a01b038a16731231deb6f5749ef6ce6943a275a1d3e7486f4eae83614073565b505b505b6000731231deb6f5749ef6ce6943a275a1d3e7486f4eae6001600160a01b031686858560405161217b92919061583a565b60006040518083038185875af1925050503d80600081146121b8576040519150601f19603f3d011682016040523d82523d6000602084013e6121bd565b606091505b50509050806122025760405162461bcd60e51b8152602060048201526011602482015270131a599a4e8818d85b1b0819985a5b1959607a1b6044820152606401610ffd565b505061220e6001600755565b505050505050565b6008546001600160a01b031633146122405760405162461bcd60e51b8152600401610ffd90615469565b612248613e45565b612250613e6f565b6001600160a01b0381166000908152600e602052604090205460ff166122af5760405162461bcd60e51b81526020600482015260146024820152732b30bab63a1d1024b73b30b634b2103a37b5b2b760611b6044820152606401610ffd565b60006122bd826017546126cd565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232b9190615450565b905060008282101561233d578161233f565b825b9050821561238a5782816017546123569190615638565b6123609190615616565b60175461236d919061543d565b601755600a5461238a906001600160a01b03868116911683614130565b604080516001600160a01b0386168152602081018390527f1698f33bf2ba6b1a5dbe8f4e48a724e345352a91c1ad49b9e823713a38ac750d910160405180910390a1505050611b5a6001600755565b6123e1613f6a565b6001600160a01b0381166124075760405162461bcd60e51b8152600401610ffd906155e6565b600980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fad86f1a43fee68be483e267b534abff158fe4e9b790f2de1188ffe2671231c3491016115ff565b612469613f6a565b611c7e600061418f565b6011818154811061196c57600080fd5b6013818154811061196c57600080fd5b604080518082019091526000808252602082015260ff82166000908152600c602052604081205490036124d85760405162461bcd60e51b8152600401610ffd906153e5565b60ff82166000908152600c6020526040812054600d906124fa9060019061543d565b8154811061250a5761250a61537e565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b900460ff16918101919091529392505050565b6008546001600160a01b031633146125705760405162461bcd60e51b8152600401610ffd90615469565b612578613e45565b612580613e6f565b60ff83166000908152600c602052604081205490036125b15760405162461bcd60e51b8152600401610ffd906153e5565b60ff83166000908152600c6020526040812054600d906125d39060019061543d565b815481106125e3576125e361537e565b600091825260209091200154825184516001600160a01b0390921692501461261d5760405162461bcd60e51b8152600401610ffd9061584a565b60005b8351811015612681576126798284838151811061263f5761263f61537e565b60200260200101518684815181106126595761265961537e565b60200260200101516001600160a01b0316613fe99092919063ffffffff16565b600101612620565b507fb2de8a7e3a7a5cd63b512230691a3b7c6d2a155e140eabf51de5f1cd4bbd1c9f8484846040516126b5939291906158c1565b60405180910390a1506126c86001600755565b505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561270e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612732919061564f565b600b54604051636a24d41960e11b81526001600160a01b03878116600483015260ff9390931693506000929091169063d449a83290602401602060405180830381865afa158015612787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ab919061564f565b60ff16905060006127c28560246106ee8587615590565b600b54604051630681320d60e51b81526001600160a01b0389811660048301529293506000929091169063d02641a090602401602060405180830381865afa158015612812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128369190615450565b6128409083615616565b979650505050505050565b612853613f6a565b611c7e6141df565b60606005805461108c906153b1565b6060600d805480602002602001604051908101604052809291908181526020016000905b828210156128d757600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900460ff168183015282526001909201910161288e565b50505050905090565b6128e8613f6a565b6001600160a01b03811661290e5760405162461bcd60e51b8152600401610ffd906155e6565b600b80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527ff4502d3564a672945971a0fba8e29bffe054f3ab45f59b8e003c17aeab1bbd2091016115ff565b60003361111d818585613f0b565b60006001815b601354811015612a2557601381815481106129995761299961537e565b600091825260209182902001546040805163ef563ba560e01b815290516001600160a01b039092169263ef563ba5926004808401938290030181865afa1580156129e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0b9190615394565b1515600003612a1d5760009150612a25565b60010161297c565b50919050565b612a33613f6a565b8051612a46906013906020840190614b4f565b507f75793d06eb3a848ff6160cccf8a42cb464c416ed07faf13dfb47ae4f46857d0681604051611c1b9190614d18565b6014818154811061196c57600080fd5b600080601754612a94613265565b11612aa0576000612ab5565b601754612aab613265565b612ab5919061543d565b9050612ac36024600a615584565b81111580612ae35750612ad86006600a615584565b612ae06113bc565b11155b15612af55761154c8360066024611693565b612afd6113bc565b612b078285615638565b61154c9190615616565b600080601754612b1f613265565b11612b2b576000612b40565b601754612b36613265565b612b40919061543d565b9050612b4e6024600a615584565b81111580612b6e5750612b636006600a615584565b612b6b6113bc565b11155b15612b805761154c8360246006611693565b80612b896113bc565b612b079085615638565b6008546001600160a01b03163314612bbd5760405162461bcd60e51b8152600401610ffd90615469565b612bc5613e45565b612bcd613e6f565b60ff83166000908152600c60205260408120549003612bfe5760405162461bcd60e51b8152600401610ffd906153e5565b60ff83166000908152600c6020526040812054600d90612c209060019061543d565b81548110612c3057612c3061537e565b60009182526020822001546001600160a01b03169150836004811115612c5857612c586158ef565b03612d095760008083806020019051810190612c74919061598d565b5092509250508051825114612c9b5760405162461bcd60e51b8152600401610ffd9061584a565b60005b8251811015612d01576000828281518110612cbb57612cbb61537e565b60200260200101511115612cf957612cf984838381518110612cdf57612cdf61537e565b60200260200101518584815181106126595761265961537e565b600101612c9e565b505050612d8c565b6001836004811115612d1d57612d1d6158ef565b03612d8c57600082806020019051810190612d389190615a75565b50935050506001600160a01b03821630149050612d8a5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2103932b1b2b4bb32b960811b6044820152606401610ffd565b505b604051633ed34d9360e21b81526001600160a01b0382169063fb4d364c90612dba9086908690600401615b02565b600060405180830381600087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050507fd1d58280d995f2eeb79c5a7a40676ea3a07813ac558a14adb50cb7a0dae135a18484846040516126b593929190615b22565b612e27613f6a565b6001600160a01b03811660009081526010602052604081205460ff1615159003611c26576001600160a01b0381166000818152601060209081526040808320805460ff191660019081179091556011805491820181559093527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c6890920180546001600160a01b0319168417905590519182527f9de0acb434fe97ecc1d1a16e96e0fef8e9a12b54d716f753d570c59539f93ab59101611c1b565b6000805b601454811015612f3757336001600160a01b031660148281548110612f0c57612f0c61537e565b6000918252602090912001546001600160a01b031603612f2f5760019150612f37565b600101612ee5565b5080612f855760405162461bcd60e51b815260206004820152601c60248201527f5661756c743a20496e76616c6964207661756c74206d616e61676572000000006044820152606401610ffd565b6113b8308361421c565b612f97613e6f565b612f9f613e45565b612fa7612976565b1515600114612fc85760405162461bcd60e51b8152600401610ffd90615b4b565b601954341015612fea5760405162461bcd60e51b8152600401610ffd90615b7b565b6000851161303a5760405162461bcd60e51b815260206004820152601e60248201527f5661756c743a20496e76616c6964204c5020746f6b656e20616d6f756e7400006044820152606401610ffd565b613042614252565b6040516323b872dd60e01b8152336004820152306024820181905260448201879052906323b872dd906064016020604051808303816000875af115801561308d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b19190615394565b5060006130bd86612a86565b905060006130cb86866113dc565b5091505060006130db8787611129565b90506000816130ef8560068660ff16611693565b6130f99190615616565b9050600087828b8989604051602001613116959493929190615bbc565b60408051601f1981840301815291815260ff8b166000908152600c60205290812054919250036131585760405162461bcd60e51b8152600401610ffd906153e5565b60ff89166000908152600c6020526040812054600d9061317a9060019061543d565b8154811061318a5761318a61537e565b600091825260209091200154604051633ed34d9360e21b81526001600160a01b039091169150819063fb4d364c906131c9906001908690600401615b02565b600060405180830381600087803b1580156131e357600080fd5b505af11580156131f7573d6000803e3d6000fd5b5050604080518e815260ff8e811660208301528d16818301526001600160a01b038c16606082015290517ff9dc9eadd0cc0780e3b8e626ab108cc4acbfaa08f131e9c3a79d90e9d22081a09350908190036080019150a150505050505061325e6001600755565b5050505050565b600061326f612976565b15156001146132905760405162461bcd60e51b8152600401610ffd90615b4b565b60005b600d5460ff8216101561334457600d8160ff16815481106132b6576132b661537e565b60009182526020918290200154604080516335c7e92560e01b815290516001600160a01b03909216926335c7e925926004808401938290030181865afa158015613304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133289190615450565b6133329083615590565b915061333d81615bf2565b9050613293565b5060005b600f5481101561341d57613409600f82815481106133685761336861537e565b600091825260209091200154600f80546001600160a01b0390921691849081106133945761339461537e565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156133e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190615450565b6134139083615590565b9150600101613348565b5061342a6024600a615584565b6113d79082615590565b61343c613f6a565b6001600160a01b0381166000908152600e602052604090205460ff1615156001036135b6576001600160a01b0381166000908152600e60205260408120805460ff191690555b600f548110156135b457816001600160a01b0316600f82815481106134a9576134a961537e565b6000918252602090912001546001600160a01b0316036135ac57600f80546134d39060019061543d565b815481106134e3576134e361537e565b600091825260209091200154600f80546001600160a01b03909216918390811061350f5761350f61537e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600f80548061354e5761354e61566c565b6000828152602090819020600019908301810180546001600160a01b03191690559091019091556040516001600160a01b03841681527fd45f8e69dd1637935a0de01b2f0d707b0f009e604d60d445d28ed36e6281925c91016115ff565b600101613482565b505b60405162461bcd60e51b815260206004820152601a60248201527f5661756c743a204e6f6e2d616363657074656420746f6b656e2e0000000000006044820152606401610ffd565b613606613f6a565b6103e88111156136685760405162461bcd60e51b815260206004820152602760248201527f5661756c743a2070726f746f636f6c20666565206578636565647320746865206044820152666d61782066656560c81b6064820152608401610ffd565b60168190556040518181527f6668cdfd543255bfacce42e8e363820b28fd302f59ac468c0a7474a38556c9ef90602001611c1b565b6136a5613f6a565b80516136b8906014906020840190614b4f565b507f89e49a824d9524bf238c9ad5c47117e0b3fe3246a6dbbda21847a66b58bcc93881604051611c1b9190614d18565b600d81815481106136f857600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b900460ff1682565b613725613f6a565b6001600160a01b0381166137745760405162461bcd60e51b81526020600482015260166024820152755661756c743a20496e76616c6964206164647265737360501b6044820152606401610ffd565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fcb7ef3e545f5cdb893f5c568ba710fe08f336375a2d9fd66e161033f8fc09ef390602001611c1b565b60ff82166000908152600c6020526040812054606091829190036137e7579050611123565b60ff84166000908152600c6020526040812054600d906138099060019061543d565b815481106138195761381961537e565b600091825260209182902060408051808201825292909101546001600160a01b03811680845260ff600160a01b9092048216948401949094529051630a9e949160e21b81529087166004820152909250632a7a524490602401600060405180830381865afa15801561388f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526138b79190810190615c11565b95945050505050565b6138c8613f6a565b6001600160a01b0381166138f257604051631e4fbdf760e01b815260006004820152602401610ffd565b611b5a8161418f565b613903613f6a565b60ff81166000908152600c602052604081205490036139345760405162461bcd60e51b8152600401610ffd906153e5565b60ff81166000908152600c60205260408120546139539060019061543d565b60ff83166000908152600c6020526040812055600d549091506139789060019061543d565b8114613a5257600d8054600091906139929060019061543d565b815481106139a2576139a261537e565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b900460ff1691810191909152600d80549192508291849081106139f0576139f061537e565b6000918252602091829020835191018054939092015160ff16600160a01b026001600160a81b03199093166001600160a01b0390911617919091179055613a38826001615590565b60209182015160ff166000908152600c9092526040909120555b600d805480613a6357613a6361566c565b6000828152602090819020600019908301810180546001600160a81b031916905590910190915560405160ff841681527f0a312f1a2ac6a06b589a288d1fb8f65a78df1d25f4518b5d90d6dfb3b3c5dc1891016115ff565b613ac3613e45565b613acb613e6f565b613ad3612976565b1515600114613af45760405162461bcd60e51b8152600401610ffd90615b4b565b601854341015613b165760405162461bcd60e51b8152600401610ffd90615b7b565b6001600160a01b03841660009081526010602052604090205460ff16613b755760405162461bcd60e51b81526020600482015260146024820152732b30bab63a1d1024b73b30b634b2103a37b5b2b760611b6044820152606401610ffd565b613b7d614252565b60008311613bcd5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a20496e76616c696420746f6b656e20616d6f756e7400000000006044820152606401610ffd565b6000613bd985856117db565b9050613be76002602461543d565b613bf290600a615584565b811015613c385760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59081d1bdad95b88185b5bdd5b9d60621b6044820152606401610ffd565b6000613c4382612b11565b905060008111613c955760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a20496e73756666696369656e7420616d6f756e740000000000006044820152606401610ffd565b613caa6001600160a01b038716333088614327565b613cb48482614360565b604080516001600160a01b0388168152602081018790527f6c37c6ecf36829ae3759052fb0ebde09db8d9df703558db7886f111614de4741910160405180910390a1613d01868685614396565b50506110776001600755565b600080601754613d1b613265565b11613d27576000613d3c565b601754613d32613265565b613d3c919061543d565b90506000613d4c6024600a615584565b82111580613d6c5750613d616006600a615584565b613d696113bc565b11155b15613d805750670de0b6b3a7640000611123565b6000613d948360246106ee60066012615590565b9050613d9e6113bc565b61126b9082615616565b613db0613f6a565b60408051808201825283815282151560208083018281526001600160a01b0388166000818152601a84528690209451855590516001909401805460ff191694151594909417909355835192835282018590528183015290517f160fca7789fcddb5f1492ef25177eaf4334d926db90c8707261121a213ba34cf916060908290030190a1505050565b6126c8838383600161465c565b600260075403613e6857604051633ee5aeb560e01b815260040160405180910390fd5b6002600755565b60065460ff1615611c7e5760405163d93c066560e01b815260040160405180910390fd5b6001600160a01b0383811660009081526002602090815260408083209386168352929052205460001981146110775781811015613efc57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610ffd565b6110778484848403600061465c565b6001600160a01b038316613f3557604051634b637e8f60e11b815260006004820152602401610ffd565b6001600160a01b038216613f5f5760405163ec442f0560e01b815260006004820152602401610ffd565b6126c8838383614731565b6000546001600160a01b03163314611c7e5760405163118cdaa760e01b8152336004820152602401610ffd565b613f9f61473c565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015614039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061405d9190615450565b9050611077848461406e8585615590565b61475f565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156140c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140e79190615450565b9050818110156141235760405163e570110f60e01b81526001600160a01b03841660048201526024810182905260448101839052606401610ffd565b611077848484840361475f565b6040516001600160a01b038381166024830152604482018390526126c891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506147eb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6141e7613e6f565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613fcc3390565b6001600160a01b03821661424657604051634b637e8f60e11b815260006004820152602401610ffd565b6113b882600083614731565b601554600061425f613d0d565b9050818111156142e7576000614275838361543d565b9050600061429a6142846113bc565b61428e9084615638565b61194b60066012615590565b90506000612710601654836142af9190615638565b6142b99190615616565b905080601760008282546142cd9190615590565b909155506142db9050613d0d565b601555506142ed915050565b60158190555b6015546040805184815260208101929092527f5d9d530192099327de5a2c3afce10e28b8b9ca0efbc42dd0404947d28e95118991016115ff565b6040516001600160a01b0384811660248301528381166044830152606482018390526110779186918216906323b872dd9060840161415d565b6001600160a01b03821661438a5760405163ec442f0560e01b815260006004820152602401610ffd565b6113b860008383614731565b6012546000906143b19060ff808216916101009004166137c2565b905060005b815181101561460157846001600160a01b03168282815181106143db576143db61537e565b60200260200101516001600160a01b0316036145f957600082516001600160401b0381111561440c5761440c614f15565b604051908082528060200260200182016040528015614435578160200160208202803683370190505b5090508481838151811061444b5761444b61537e565b6020026020010181815250506000601260019054906101000a900460ff1684838760405160200161447f9493929190615c45565b60408051601f1981840301815291815260125460ff166000908152600c60205290812054919250036144c35760405162461bcd60e51b8152600401610ffd906153e5565b60125460ff166000908152600c6020526040812054600d906144e79060019061543d565b815481106144f7576144f761537e565b9060005260206000200160000160009054906101000a90046001600160a01b0316905061453181888787815181106126595761265961537e565b604051633ed34d9360e21b81526001600160a01b0382169063fb4d364c90614560906000908690600401615b02565b600060405180830381600087803b15801561457a57600080fd5b505af115801561458e573d6000803e3d6000fd5b50506012546040805160ff808416825261010090930490921660208301526001600160a01b038c1682820152606082018b9052517f4a73781a39df215cc38853e07006d66222cc28e3f25802b0ed4ec11282df56c29350908190036080019150a15050505050505050565b6001016143b6565b5060405162461bcd60e51b815260206004820152602960248201527f5661756c743a206465706f73697420746f6b656e206e6f7420696e20616c6c6f604482015268776564546f6b656e7360b81b6064820152608401610ffd565b6001600160a01b0384166146865760405163e602df0560e01b815260006004820152602401610ffd565b6001600160a01b0383166146b057604051634a1406b160e11b815260006004820152602401610ffd565b6001600160a01b038085166000908152600260209081526040808320938716835292905220829055801561107757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161472391815260200190565b60405180910390a350505050565b6126c883838361484e565b60065460ff16611c7e57604051638dfc202b60e01b815260040160405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526147b08482614861565b611077576040516001600160a01b038481166024830152600060448301526147e591869182169063095ea7b39060640161415d565b61107784825b60006148006001600160a01b03841683614904565b905080516000141580156148255750808060200190518101906148239190615394565b155b156126c857604051635274afe760e01b81526001600160a01b0384166004820152602401610ffd565b614856613e6f565b6126c8838383614912565b6000806000846001600160a01b03168460405161487e9190615c87565b6000604051808303816000865af19150503d80600081146148bb576040519150601f19603f3d011682016040523d82523d6000602084013e6148c0565b606091505b50915091508180156148ea5750805115806148ea5750808060200190518101906148ea9190615394565b80156138b75750505050506001600160a01b03163b151590565b606061154c83836000614a3c565b6001600160a01b03831661493d5780600360008282546149329190615590565b909155506149af9050565b6001600160a01b038316600090815260016020526040902054818110156149905760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610ffd565b6001600160a01b03841660009081526001602052604090209082900390555b6001600160a01b0382166149cb576003805482900390556149ea565b6001600160a01b03821660009081526001602052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051614a2f91815260200190565b60405180910390a3505050565b606081471015614a615760405163cd78605960e01b8152306004820152602401610ffd565b600080856001600160a01b03168486604051614a7d9190615c87565b60006040518083038185875af1925050503d8060008114614aba576040519150601f19603f3d011682016040523d82523d6000602084013e614abf565b606091505b5091509150611952868383606082614adf57614ada82614b26565b61154c565b8151158015614af657506001600160a01b0384163b155b15614b1f57604051639996b31560e01b81526001600160a01b0385166004820152602401610ffd565b508061154c565b805115614b365780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b828054828255906000526020600020908101928215614ba4579160200282015b82811115614ba457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614b6f565b50614bb0929150614bb4565b5090565b5b80821115614bb05760008155600101614bb5565b6001600160a01b0381168114611b5a57600080fd5b60008060408385031215614bf157600080fd5b8235614bfc81614bc9565b946020939093013593505050565b60005b83811015614c25578181015183820152602001614c0d565b50506000910152565b60008151808452614c46816020860160208601614c0a565b601f01601f19169290920160200192915050565b60208152600061154c6020830184614c2e565b60ff81168114611b5a57600080fd5b60008060408385031215614c8f57600080fd5b8235614c9a81614c6d565b91506020830135614caa81614c6d565b809150509250929050565b60008060408385031215614cc857600080fd5b8235614bfc81614c6d565b60008151808452602080850194506020840160005b83811015614d0d5781516001600160a01b031687529582019590820190600101614ce8565b509495945050505050565b60208152600061154c6020830184614cd3565b600060208284031215614d3d57600080fd5b813561154c81614bc9565b600080600060608486031215614d5d57600080fd5b8335614d6881614bc9565b92506020840135614d7881614bc9565b929592945050506040919091013590565b600080600060608486031215614d9e57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215614dc857600080fd5b50508035926020909101359150565b600060208284031215614de957600080fd5b5035919050565b60008060408385031215614e0357600080fd5b8235614e0e81614c6d565b91506020830135614caa81614bc9565b8015158114611b5a57600080fd5b60008060008060008060a08789031215614e4557600080fd5b8635614e5081614bc9565b955060208701359450604087013593506060870135614e6e81614e1e565b925060808701356001600160401b0380821115614e8a57600080fd5b818901915089601f830112614e9e57600080fd5b813581811115614ead57600080fd5b8a6020828501011115614ebf57600080fd5b6020830194508093505050509295509295509295565b600060208284031215614ee757600080fd5b813561154c81614c6d565b81516001600160a01b0316815260208083015160ff169082015260408101611123565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614f5357614f53614f15565b604052919050565b60006001600160401b03821115614f7457614f74614f15565b5060051b60200190565b600082601f830112614f8f57600080fd5b81356020614fa4614f9f83614f5b565b614f2b565b8083825260208201915060208460051b870101935086841115614fc657600080fd5b602086015b84811015614feb578035614fde81614bc9565b8352918301918301614fcb565b509695505050505050565b60008060006060848603121561500b57600080fd5b833561501681614c6d565b92506020848101356001600160401b038082111561503357600080fd5b61503f88838901614f7e565b9450604087013591508082111561505557600080fd5b508501601f8101871361506757600080fd5b8035615075614f9f82614f5b565b81815260059190911b8201830190838101908983111561509457600080fd5b928401925b828410156150b257833582529284019290840190615099565b80955050505050509250925092565b602080825282518282018190526000919060409081850190868401855b828110156151175761510784835180516001600160a01b0316825260209081015160ff16910152565b92840192908501906001016150de565b5091979650505050505050565b60006020828403121561513657600080fd5b81356001600160401b0381111561514c57600080fd5b61126b84828501614f7e565b60006001600160401b0382111561517157615171614f15565b50601f01601f191660200190565b600082601f83011261519057600080fd5b813561519e614f9f82615158565b8181528460208386010111156151b357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156151e557600080fd5b83356151f081614c6d565b925060208401356005811061520457600080fd5b915060408401356001600160401b0381111561521f57600080fd5b61522b8682870161517f565b9150509250925092565b600080600080600060a0868803121561524d57600080fd5b85359450602086013561525f81614c6d565b9350604086013561526f81614c6d565b9250606086013561527f81614bc9565b915060808601356001600160401b0381111561529a57600080fd5b6152a68882890161517f565b9150509295509295909350565b600080604083850312156152c657600080fd5b8235614e0e81614bc9565b600080600080608085870312156152e757600080fd5b84356152f281614bc9565b935060208501359250604085013561530981614bc9565b915060608501356001600160401b0381111561532457600080fd5b6153308782880161517f565b91505092959194509250565b60008060006060848603121561535157600080fd5b833561535c81614bc9565b925060208401359150604084013561537381614e1e565b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156153a657600080fd5b815161154c81614e1e565b600181811c908216806153c557607f821691505b602082108103612a2557634e487b7160e01b600052602260045260246000fd5b60208082526022908201527f506c7567696e2077697468207468697320494420646f6573206e6f74206578696040820152611cdd60f21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561112357611123615427565b60006020828403121561546257600080fd5b5051919050565b6020808252601c908201527f5661756c743a2063616c6c6572206d757374206265206d617374657200000000604082015260600190565b600181815b808511156154db5781600019048211156154c1576154c1615427565b808516156154ce57918102915b93841c93908002906154a5565b509250929050565b6000826154f257506001611123565b816154ff57506000611123565b8160018114615515576002811461551f5761553b565b6001915050611123565b60ff84111561553057615530615427565b50506001821b611123565b5060208310610133831016604e8410600b841016171561555e575081810a611123565b61556883836154a0565b806000190482111561557c5761557c615427565b029392505050565b600061154c83836154e3565b8082018082111561112357611123615427565b6000806000606084860312156155b857600080fd5b83516155c381614bc9565b60208501519093506155d481614c6d565b80925050604084015190509250925092565b6020808252601690820152755661756c743a20496e76616c6964204164647265737360501b604082015260600190565b60008261563357634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761112357611123615427565b60006020828403121561566157600080fd5b815161154c81614c6d565b634e487b7160e01b600052603160045260246000fd5b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006156bf614f9f84615158565b90508281528383830111156156d357600080fd5b61154c836020830184614c0a565b600080600080600080600060e0888a0312156156fc57600080fd5b87516001600160401b0381111561571257600080fd5b8801601f81018a1361572357600080fd5b6157328a8251602084016156b1565b975050602088015161574381614bc9565b604089015190965061575481614bc9565b80955050606088015193506080880151925060a088015161577481614e1e565b60c089015190925061578581614e1e565b8091505092959891949750929550565b60208082526024908201527f5661756c743a204c696669207265636569766572206e6f742077686974656c696040820152631cdd195960e21b606082015260800190565b600080600080600060a086880312156157f157600080fd5b85516157fc81614bc9565b60208701516040880151919650945061581481614bc9565b606087015190935061582581614bc9565b80925050608086015190509295509295909350565b8183823760009101908152919050565b60208082526026908201527f5661756c743a204c69737473206d7573742068617665207468652073616d65206040820152650d8cadccee8d60d31b606082015260800190565b60008151808452602080850194506020840160005b83811015614d0d578151875295820195908201906001016158a5565b60ff841681526060602082015260006158dd6060830185614cd3565b82810360408401526119528185615890565b634e487b7160e01b600052602160045260246000fd5b600082601f83011261591657600080fd5b81516020615926614f9f83614f5b565b8083825260208201915060208460051b87010193508684111561594857600080fd5b602086015b84811015614feb57805161596081614bc9565b835291830191830161594d565b600082601f83011261597e57600080fd5b61154c838351602085016156b1565b600080600080608085870312156159a357600080fd5b84516159ae81614c6d565b809450506020808601516001600160401b03808211156159cd57600080fd5b6159d989838a01615905565b955060408801519150808211156159ef57600080fd5b818801915088601f830112615a0357600080fd5b8151615a11614f9f82614f5b565b81815260059190911b8301840190848101908b831115615a3057600080fd5b938501935b82851015615a4e57845182529385019390850190615a35565b60608b01519097509450505080831115615a6757600080fd5b50506153308782880161596d565b600080600080600060a08688031215615a8d57600080fd5b8551615a9881614c6d565b8095505060208601519350604086015192506060860151615ab881614bc9565b60808701519092506001600160401b03811115615ad457600080fd5b6152a68882890161596d565b60058110615afe57634e487b7160e01b600052602160045260246000fd5b9052565b615b0c8184615ae0565b60406020820152600061126b6040830184614c2e565b60ff84168152615b356020820184615ae0565b6060604082015260006138b76060830184614c2e565b60208082526016908201527515985d5b1d0e8815985d5b1d081a5cc81b1bd8dad95960521b604082015260600190565b60208082526021908201527f5661756c743a20496e73756666696369656e7420657865637574696f6e2066656040820152606560f81b606082015260800190565b60ff8616815284602082015283604082015260018060a01b038316606082015260a06080820152600061284060a0830184614c2e565b600060ff821660ff8103615c0857615c08615427565b60010192915050565b600060208284031215615c2357600080fd5b81516001600160401b03811115615c3957600080fd5b61126b84828501615905565b60ff85168152608060208201526000615c616080830186614cd3565b8281036040840152615c738186615890565b905082810360608401526128408185614c2e565b60008251615c99818460208701614c0a565b919091019291505056fea2646970667358221220f97efa3bf4ea61d83e5e8b261532a01fa54fdaef5b92eccbccd5e495406dac3264736f6c634300081800335661756c743a20496e76616c6964204164647265737300000000000000000000",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failed `decreaseAllowance` request."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3938,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4237,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4243,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4245,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4247,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 4249,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 5485,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 5604,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 15406,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "master",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 15408,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "admin",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 15410,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "treasury",
        "offset": 0,
        "slot": "10",
        "type": "t_address_payable"
      },
      {
        "astId": 15412,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "tokenPriceConsumer",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 15416,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "pluginIdToIndex",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 15420,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "plugins",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Plugin)15404_storage)dyn_storage"
      },
      {
        "astId": 15424,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "acceptedTokenMap",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15427,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "acceptedTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15431,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "depositAllowedTokenMap",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15434,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "depositAllowedTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15436,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "selectedPluginId",
        "offset": 0,
        "slot": "18",
        "type": "t_uint8"
      },
      {
        "astId": 15438,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "selectedPoolId",
        "offset": 1,
        "slot": "18",
        "type": "t_uint8"
      },
      {
        "astId": 15441,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "vaultLockers",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15444,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "vaultManagers",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15447,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "lpRate",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 15449,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "protocolFeePercentage",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 15451,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "protocolFeeInVault",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 15453,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "depositMinExecFee",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 15455,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "withdrawMinExecFee",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 15465,
        "contract": "contracts/vaults/theseus/Vault.sol:Vault",
        "label": "lifiReceiverWhiteList",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_struct(lifiWhiteListReceiver)15460_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Plugin)15404_storage)dyn_storage": {
        "base": "t_struct(Plugin)15404_storage",
        "encoding": "dynamic_array",
        "label": "struct Vault.Plugin[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(lifiWhiteListReceiver)15460_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.lifiWhiteListReceiver)",
        "numberOfBytes": "32",
        "value": "t_struct(lifiWhiteListReceiver)15460_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Plugin)15404_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Plugin",
        "members": [
          {
            "astId": 15401,
            "contract": "contracts/vaults/theseus/Vault.sol:Vault",
            "label": "pluginAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15403,
            "contract": "contracts/vaults/theseus/Vault.sol:Vault",
            "label": "pluginId",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(lifiWhiteListReceiver)15460_storage": {
        "encoding": "inplace",
        "label": "struct Vault.lifiWhiteListReceiver",
        "members": [
          {
            "astId": 15457,
            "contract": "contracts/vaults/theseus/Vault.sol:Vault",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15459,
            "contract": "contracts/vaults/theseus/Vault.sol:Vault",
            "label": "isWhiteListed",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}