{
  "address": "0x0a52Cd9F239e3C1ea2Ab9D9B554dC9c08985dd39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "priceFeedAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "heartbeatDurations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "SetTokenDecimals",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "heartbeatDuration",
          "type": "uint256"
        }
      ],
      "name": "addPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenDecimal",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "removePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "setTokenDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_newDecimals",
          "type": "uint8[]"
        }
      ],
      "name": "setTokenDecimalsBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDecimalList",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x661c3da34a051f684b59d468d616cceec6b3c85bd62ecd05ff9180c7989fc05c",
  "receipt": {
    "to": null,
    "from": "0xa3D6360C288551600B20A7992860766F9754e477",
    "contractAddress": "0x0a52Cd9F239e3C1ea2Ab9D9B554dC9c08985dd39",
    "transactionIndex": 0,
    "gasUsed": "938984",
    "logsBloom": "0x
    "blockHash": "0x2a7b5464e966c36555f84975fe09d9bd321ada9732f0f6abd8b180b1d4224e40",
    "transactionHash": "0x661c3da34a051f684b59d468d616cceec6b3c85bd62ecd05ff9180c7989fc05c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 35297913,
        "transactionHash": "0x661c3da34a051f684b59d468d616cceec6b3c85bd62ecd05ff9180c7989fc05c",
        "address": "0x0a52Cd9F239e3C1ea2Ab9D9B554dC9c08985dd39",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a3d6360c288551600b20a7992860766f9754e477"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2a7b5464e966c36555f84975fe09d9bd321ada9732f0f6abd8b180b1d4224e40"
      }
    ],
    "blockNumber": 35297913,
    "cumulativeGasUsed": "938984",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x3eBDeaA0DB3FfDe96E7a0DBBAFEC961FC50F725F",
      "0x50df4892Bd13f01E4e1Cd077ff394A8fa1A3fD7c",
      "0x3Bd8e00c25B12E6E60fc8B6f1E1E2236102073Ca",
      "0x1D308089a2D1Ced3f1Ce36B1FcaF815b07217be3",
      "0x82F0b3695Ed2324e55bbD9A9554cB4192EC3a514"
    ],
    [
      "0x97FE42a7E96640D932bbc0e1580c73E705A8EB73",
      "0x7898AcCC83587C3C55116c5230C17a6Cd9C71bad",
      "0x31CF013A08c6Ac228C94551d535d5BAfE19c602a",
      "0x5498BB86BC934c8D34FDA08E81D444153d0D06aD",
      "0x86d67c3D38D2bCeE722E601025C25a575021c6EA"
    ],
    [
      86400,
      86400,
      86400,
      600,
      86400
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "0ef295114f265618a9c049425a8fbb66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"priceFeedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"heartbeatDurations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"SetTokenDecimals\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"heartbeatDuration\",\"type\":\"uint256\"}],\"name\":\"addPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDecimal\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"removePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setTokenDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_newDecimals\",\"type\":\"uint8[]\"}],\"name\":\"setTokenDecimalsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimalList\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenDecimal(address)\":{\"notice\":\"The decimals function above returns the number of decimal places used by the price feed. This function is specifically designed to handle non-ERC20 tokens, such as GMX synthetic tokens, which the vault accepts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/TokenPriceConsumer.sol\":\"TokenPriceConsumer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\",\"keccak256\":\"0xc3a94ff6a613cc03d06048aebc8c72f209b3bbf34b6dd85a0d4b0f6423fd47aa\",\"license\":\"MIT\"},\"contracts/vaults/TokenPriceConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.18;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract TokenPriceConsumer is Ownable {\\n    mapping(address => AggregatorV3Interface) private tokenPriceFeeds;\\n    \\n    mapping(address => uint256) private tokenHeartbeatDurations;\\n\\n        \\n    mapping(address => uint8) public tokenDecimalList;\\n\\n    event SetTokenDecimals(address _token, uint8 _decimals);\\n\\n    constructor(address[] memory tokenAddresses, address[] memory priceFeedAddresses, uint256[] memory heartbeatDurations) Ownable(msg.sender) {\\n        require(tokenAddresses.length == priceFeedAddresses.length, \\\"Arrays length mismatch\\\");\\n        require(tokenAddresses.length == heartbeatDurations.length, \\\"Arrays length mismatch\\\");\\n\\n\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            tokenPriceFeeds[tokenAddresses[i]] = AggregatorV3Interface(priceFeedAddresses[i]);\\n            tokenHeartbeatDurations[tokenAddresses[i]] = heartbeatDurations[i];\\n        }\\n    }\\n\\n    function addPriceFeed(address tokenAddress, address priceFeedAddress, uint256 heartbeatDuration) public onlyOwner {\\n        require(priceFeedAddress != address(0), \\\"Invalid address\\\");\\n        require(address(tokenPriceFeeds[tokenAddress]) == address(0), \\\"PriceFeed already exist\\\");\\n        tokenPriceFeeds[tokenAddress] = AggregatorV3Interface(priceFeedAddress);\\n        tokenHeartbeatDurations[tokenAddress] = heartbeatDuration;\\n\\n    }\\n\\n    function removePriceFeed(address tokenAddress) public onlyOwner {\\n        require(address(tokenPriceFeeds[tokenAddress]) != address(0), \\\"PriceFeed already exist\\\");\\n        delete tokenPriceFeeds[tokenAddress];\\n        delete tokenHeartbeatDurations[tokenAddress];\\n    }\\n\\n    function setTokenDecimals(address _token, uint8 _decimals) public onlyOwner {\\n        tokenDecimalList[_token] = _decimals;\\n\\n        emit SetTokenDecimals(_token, _decimals);\\n    }\\n\\n\\n    function setTokenDecimalsBatch(address[] calldata _tokens, uint8[] calldata _newDecimals) external onlyOwner {\\n        require(_tokens.length == _newDecimals.length, \\\"Arrays must have the same length\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            setTokenDecimals(_tokens[i], _newDecimals[i]);\\n        }\\n    }\\n\\n    function getTokenPrice(address tokenAddress) public view returns (uint256) {\\n        AggregatorV3Interface priceFeed = tokenPriceFeeds[tokenAddress];\\n        require(address(priceFeed) != address(0), \\\"Price feed not found\\\");\\n\\n        (uint80 roundId, int256 answer, ,uint256 updatedAt  , ) = priceFeed.latestRoundData();\\n\\n        require(roundId != 0 && answer >= 0 && updatedAt != 0, \\\"PriceFeed: Sanity check\\\");\\n\\n        require(block.timestamp - updatedAt <= tokenHeartbeatDurations[tokenAddress], \\\"Price feed is stale\\\");\\n        \\n        // Token price might need additional scaling based on decimals\\n        return uint256(answer);\\n    }\\n\\n    function decimals(address tokenAddress) public view returns (uint8) {\\n        AggregatorV3Interface priceFeed = tokenPriceFeeds[tokenAddress];\\n        require(address(priceFeed) != address(0), \\\"Price feed not found\\\");\\n        return priceFeed.decimals();\\n    }\\n\\n    /// @notice The decimals function above returns the number of decimal places used by the price feed. This function is specifically designed to handle non-ERC20 tokens, such as GMX synthetic tokens, which the vault accepts.\\n    function getTokenDecimal(address token) public view returns (uint8) {\\n        if(isContract(token)) {\\n            return IERC20Metadata(token).decimals();\\n        } else {\\n            uint8 decimalValue = tokenDecimalList[token];\\n            require(decimalValue > 0, \\\"Token decimals not set\\\");\\n            return decimalValue;       \\n        }\\n    }\\n\\n    // Public view function to determine whether the given address is a contract or an externally-owned account (EOA).\\n    // It uses the assembly block to efficiently check the size of the code at the specified address.\\n    // If the size of the code (extcodesize) is greater than 0, the address is considered a contract.\\n    // Returns true if the address is a contract and false if it is an externally-owned account.\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n\\n        // Use assembly to get the size of the code at the specified address.\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        // Return true if the size of the code is greater than 0, indicating a contract.\\n        return (size > 0);\\n    }\\n}\",\"keccak256\":\"0xd92754f7ca59f4f7bdafc9a61fc3219fa7cff1f6f660a69373c62f2fb628b51e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f8138038062000f81833981016040819052620000349162000357565b33806200005c57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000067816200020a565b508151835114620000bb5760405162461bcd60e51b815260206004820152601660248201527f417272617973206c656e677468206d69736d6174636800000000000000000000604482015260640162000053565b80518351146200010e5760405162461bcd60e51b815260206004820152601660248201527f417272617973206c656e677468206d69736d6174636800000000000000000000604482015260640162000053565b60005b8351811015620002005782818151811062000130576200013062000443565b60200260200101516001600086848151811062000151576200015162000443565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818181518110620001b257620001b262000443565b602002602001015160026000868481518110620001d357620001d362000443565b6020908102919091018101516001600160a01b031682528101919091526040016000205560010162000111565b5050505062000459565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200029b576200029b6200025a565b604052919050565b60006001600160401b03821115620002bf57620002bf6200025a565b5060051b60200190565b600082601f830112620002db57600080fd5b81516020620002f4620002ee83620002a3565b62000270565b8083825260208201915060208460051b8701019350868411156200031757600080fd5b602086015b848110156200034c5780516001600160a01b03811681146200033e5760008081fd5b83529183019183016200031c565b509695505050505050565b6000806000606084860312156200036d57600080fd5b83516001600160401b03808211156200038557600080fd5b6200039387838801620002c9565b9450602091508186015181811115620003ab57600080fd5b620003b988828901620002c9565b945050604086015181811115620003cf57600080fd5b86019050601f81018713620003e357600080fd5b8051620003f4620002ee82620002a3565b81815260059190911b820183019083810190898311156200041457600080fd5b928401925b82841015620004345783518252928401929084019062000419565b80955050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b610b1880620004696000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063bda7738611610071578063bda7738614610133578063c2ca3d0d14610146578063d02641a014610159578063d449a8321461017a578063f2fde38b1461018d578063fceb0024146101a057600080fd5b806329c3fcef146100ae57806358e86625146100e85780635cdcd8bb146100fb578063715018a6146101105780638da5cb5b14610118575b600080fd5b6100d16100bc3660046108b2565b60036020526000908152604090205460ff1681565b60405160ff90911681526020015b60405180910390f35b6100d16100f63660046108b2565b6101b3565b61010e6101093660046108dc565b610296565b005b61010e610301565b6000546040516001600160a01b0390911681526020016100df565b61010e610141366004610913565b610315565b61010e61015436600461099b565b610404565b61016c6101673660046108b2565b6104c6565b6040519081526020016100df565b6100d16101883660046108b2565b61067b565b61010e61019b3660046108b2565b610745565b61010e6101ae3660046108b2565b610783565b6000813b63ffffffff161561022a57816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610a07565b92915050565b6001600160a01b03821660009081526003602052604090205460ff16806102245760405162461bcd60e51b8152602060048201526016602482015275151bdad95b88191958da5b585b1cc81b9bdd081cd95d60521b60448201526064015b60405180910390fd5b919050565b61029e61081e565b6001600160a01b038216600081815260036020908152604091829020805460ff191660ff86169081179091558251938452908301527e97ef8921f7712fdab9d5637cfa3703fc8decec3c18f710a3c62a60f822cb06910160405180910390a15050565b61030961081e565b610313600061084b565b565b61031d61081e565b6001600160a01b0382166103655760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610288565b6001600160a01b0383811660009081526001602052604090205416156103c75760405162461bcd60e51b8152602060048201526017602482015276141c9a58d95199595908185b1c9958591e48195e1a5cdd604a1b6044820152606401610288565b6001600160a01b03928316600090815260016020908152604080832080546001600160a01b03191695909616949094179094556002909352912055565b61040c61081e565b82811461045b5760405162461bcd60e51b815260206004820181905260248201527f417272617973206d7573742068617665207468652073616d65206c656e6774686044820152606401610288565b60005b838110156104bf576104b785858381811061047b5761047b610a24565b905060200201602081019061049091906108b2565b8484848181106104a2576104a2610a24565b90506020020160208101906101099190610a3a565b60010161045e565b5050505050565b6001600160a01b03808216600090815260016020526040812054909116806105275760405162461bcd60e51b8152602060048201526014602482015273141c9a58d94819995959081b9bdd08199bdd5b9960621b6044820152606401610288565b6000806000836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610a71565b50935050925092508269ffffffffffffffffffff166000141580156105b4575060008212155b80156105bf57508015155b61060b5760405162461bcd60e51b815260206004820152601760248201527f5072696365466565643a2053616e69747920636865636b0000000000000000006044820152606401610288565b6001600160a01b03861660009081526002602052604090205461062e8242610ac1565b11156106725760405162461bcd60e51b815260206004820152601360248201527250726963652066656564206973207374616c6560681b6044820152606401610288565b50949350505050565b6001600160a01b03808216600090815260016020526040812054909116806106dc5760405162461bcd60e51b8152602060048201526014602482015273141c9a58d94819995959081b9bdd08199bdd5b9960621b6044820152606401610288565b806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190610a07565b9392505050565b61074d61081e565b6001600160a01b03811661077757604051631e4fbdf760e01b815260006004820152602401610288565b6107808161084b565b50565b61078b61081e565b6001600160a01b03818116600090815260016020526040902054166107ec5760405162461bcd60e51b8152602060048201526017602482015276141c9a58d95199595908185b1c9958591e48195e1a5cdd604a1b6044820152606401610288565b6001600160a01b0316600090815260016020908152604080832080546001600160a01b03191690556002909152812055565b6000546001600160a01b031633146103135760405163118cdaa760e01b8152336004820152602401610288565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461029157600080fd5b6000602082840312156108c457600080fd5b61073e8261089b565b60ff8116811461078057600080fd5b600080604083850312156108ef57600080fd5b6108f88361089b565b91506020830135610908816108cd565b809150509250929050565b60008060006060848603121561092857600080fd5b6109318461089b565b925061093f6020850161089b565b9150604084013590509250925092565b60008083601f84011261096157600080fd5b50813567ffffffffffffffff81111561097957600080fd5b6020830191508360208260051b850101111561099457600080fd5b9250929050565b600080600080604085870312156109b157600080fd5b843567ffffffffffffffff808211156109c957600080fd5b6109d58883890161094f565b909650945060208701359150808211156109ee57600080fd5b506109fb8782880161094f565b95989497509550505050565b600060208284031215610a1957600080fd5b815161073e816108cd565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a4c57600080fd5b813561073e816108cd565b805169ffffffffffffffffffff8116811461029157600080fd5b600080600080600060a08688031215610a8957600080fd5b610a9286610a57565b9450602086015193506040860151925060608601519150610ab560808701610a57565b90509295509295909350565b8181038181111561022457634e487b7160e01b600052601160045260246000fdfea2646970667358221220c4cb15c0a3268792f7d32d186017a7c67728adebef2799efc2f4f64e2d049fa664736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063bda7738611610071578063bda7738614610133578063c2ca3d0d14610146578063d02641a014610159578063d449a8321461017a578063f2fde38b1461018d578063fceb0024146101a057600080fd5b806329c3fcef146100ae57806358e86625146100e85780635cdcd8bb146100fb578063715018a6146101105780638da5cb5b14610118575b600080fd5b6100d16100bc3660046108b2565b60036020526000908152604090205460ff1681565b60405160ff90911681526020015b60405180910390f35b6100d16100f63660046108b2565b6101b3565b61010e6101093660046108dc565b610296565b005b61010e610301565b6000546040516001600160a01b0390911681526020016100df565b61010e610141366004610913565b610315565b61010e61015436600461099b565b610404565b61016c6101673660046108b2565b6104c6565b6040519081526020016100df565b6100d16101883660046108b2565b61067b565b61010e61019b3660046108b2565b610745565b61010e6101ae3660046108b2565b610783565b6000813b63ffffffff161561022a57816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610a07565b92915050565b6001600160a01b03821660009081526003602052604090205460ff16806102245760405162461bcd60e51b8152602060048201526016602482015275151bdad95b88191958da5b585b1cc81b9bdd081cd95d60521b60448201526064015b60405180910390fd5b919050565b61029e61081e565b6001600160a01b038216600081815260036020908152604091829020805460ff191660ff86169081179091558251938452908301527e97ef8921f7712fdab9d5637cfa3703fc8decec3c18f710a3c62a60f822cb06910160405180910390a15050565b61030961081e565b610313600061084b565b565b61031d61081e565b6001600160a01b0382166103655760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610288565b6001600160a01b0383811660009081526001602052604090205416156103c75760405162461bcd60e51b8152602060048201526017602482015276141c9a58d95199595908185b1c9958591e48195e1a5cdd604a1b6044820152606401610288565b6001600160a01b03928316600090815260016020908152604080832080546001600160a01b03191695909616949094179094556002909352912055565b61040c61081e565b82811461045b5760405162461bcd60e51b815260206004820181905260248201527f417272617973206d7573742068617665207468652073616d65206c656e6774686044820152606401610288565b60005b838110156104bf576104b785858381811061047b5761047b610a24565b905060200201602081019061049091906108b2565b8484848181106104a2576104a2610a24565b90506020020160208101906101099190610a3a565b60010161045e565b5050505050565b6001600160a01b03808216600090815260016020526040812054909116806105275760405162461bcd60e51b8152602060048201526014602482015273141c9a58d94819995959081b9bdd08199bdd5b9960621b6044820152606401610288565b6000806000836001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610a71565b50935050925092508269ffffffffffffffffffff166000141580156105b4575060008212155b80156105bf57508015155b61060b5760405162461bcd60e51b815260206004820152601760248201527f5072696365466565643a2053616e69747920636865636b0000000000000000006044820152606401610288565b6001600160a01b03861660009081526002602052604090205461062e8242610ac1565b11156106725760405162461bcd60e51b815260206004820152601360248201527250726963652066656564206973207374616c6560681b6044820152606401610288565b50949350505050565b6001600160a01b03808216600090815260016020526040812054909116806106dc5760405162461bcd60e51b8152602060048201526014602482015273141c9a58d94819995959081b9bdd08199bdd5b9960621b6044820152606401610288565b806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073e9190610a07565b9392505050565b61074d61081e565b6001600160a01b03811661077757604051631e4fbdf760e01b815260006004820152602401610288565b6107808161084b565b50565b61078b61081e565b6001600160a01b03818116600090815260016020526040902054166107ec5760405162461bcd60e51b8152602060048201526017602482015276141c9a58d95199595908185b1c9958591e48195e1a5cdd604a1b6044820152606401610288565b6001600160a01b0316600090815260016020908152604080832080546001600160a01b03191690556002909152812055565b6000546001600160a01b031633146103135760405163118cdaa760e01b8152336004820152602401610288565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461029157600080fd5b6000602082840312156108c457600080fd5b61073e8261089b565b60ff8116811461078057600080fd5b600080604083850312156108ef57600080fd5b6108f88361089b565b91506020830135610908816108cd565b809150509250929050565b60008060006060848603121561092857600080fd5b6109318461089b565b925061093f6020850161089b565b9150604084013590509250925092565b60008083601f84011261096157600080fd5b50813567ffffffffffffffff81111561097957600080fd5b6020830191508360208260051b850101111561099457600080fd5b9250929050565b600080600080604085870312156109b157600080fd5b843567ffffffffffffffff808211156109c957600080fd5b6109d58883890161094f565b909650945060208701359150808211156109ee57600080fd5b506109fb8782880161094f565b95989497509550505050565b600060208284031215610a1957600080fd5b815161073e816108cd565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a4c57600080fd5b813561073e816108cd565b805169ffffffffffffffffffff8116811461029157600080fd5b600080600080600060a08688031215610a8957600080fd5b610a9286610a57565b9450602086015193506040860151925060608601519150610ab560808701610a57565b90509295509295909350565b8181038181111561022457634e487b7160e01b600052601160045260246000fdfea2646970667358221220c4cb15c0a3268792f7d32d186017a7c67728adebef2799efc2f4f64e2d049fa664736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenDecimal(address)": {
        "notice": "The decimals function above returns the number of decimal places used by the price feed. This function is specifically designed to handle non-ERC20 tokens, such as GMX synthetic tokens, which the vault accepts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3938,
        "contract": "contracts/vaults/TokenPriceConsumer.sol:TokenPriceConsumer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11731,
        "contract": "contracts/vaults/TokenPriceConsumer.sol:TokenPriceConsumer",
        "label": "tokenPriceFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(AggregatorV3Interface)6333)"
      },
      {
        "astId": 11735,
        "contract": "contracts/vaults/TokenPriceConsumer.sol:TokenPriceConsumer",
        "label": "tokenHeartbeatDurations",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11739,
        "contract": "contracts/vaults/TokenPriceConsumer.sol:TokenPriceConsumer",
        "label": "tokenDecimalList",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)6333": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(AggregatorV3Interface)6333)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)6333"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}