{
  "address": "0xF0550a0aC17307E99a3c0daed794735A7710568B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoTreasury_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xMozAmount",
          "type": "uint256"
        }
      ],
      "name": "CancelRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Convert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xMozAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mozAmount",
          "type": "uint256"
        }
      ],
      "name": "FinalizeRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "xMozAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mozAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRedeemRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mediumRedeemRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRedeemRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minRedeemDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mediumRedeemDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxRedeemDuration",
          "type": "uint256"
        }
      ],
      "name": "UpdateRedeemSettings",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FIXED_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemIndex",
          "type": "uint256"
        }
      ],
      "name": "cancelRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemIndex",
          "type": "uint256"
        }
      ],
      "name": "finalizeRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "getMozByVestingDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getRedeemingXMozBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeemingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "redeemIndex",
          "type": "uint256"
        }
      ],
      "name": "getUserRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mozAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xMozAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserRedeemsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mozaicToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "xMoztoken_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeemDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeemRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediumRedeemDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mediumRedeemRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRedeemDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRedeemRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mozaicToken",
      "outputs": [
        {
          "internalType": "contract IMozToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xMozAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minRedeemRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mediumRedeemRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRedeemRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minRedeemDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mediumRedeemDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRedeemDuration_",
          "type": "uint256"
        }
      ],
      "name": "updateRedeemSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userRedeems",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mozAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xMozAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "xMozRedeemingBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xMozToken",
      "outputs": [
        {
          "internalType": "contract IXMozToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7a46bdda127745ff81691792361751cd6a6579881cac1fa89d449787873b64a",
  "receipt": {
    "to": null,
    "from": "0x7E9BA79614FeC2C52e85842502df66A6dB107fde",
    "contractAddress": "0xF0550a0aC17307E99a3c0daed794735A7710568B",
    "transactionIndex": 5,
    "gasUsed": "1278368",
    "logsBloom": "0x
    "blockHash": "0xf31f449078c7a76184e19e1b2ad4fb80923580998724e484fbc0c0ef144db7c8",
    "transactionHash": "0xe7a46bdda127745ff81691792361751cd6a6579881cac1fa89d449787873b64a",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 12250288,
        "transactionHash": "0xe7a46bdda127745ff81691792361751cd6a6579881cac1fa89d449787873b64a",
        "address": "0xF0550a0aC17307E99a3c0daed794735A7710568B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007e9ba79614fec2c52e85842502df66a6db107fde"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xf31f449078c7a76184e19e1b2ad4fb80923580998724e484fbc0c0ef144db7c8"
      }
    ],
    "blockNumber": 12250288,
    "cumulativeGasUsed": "1604329",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E9BA79614FeC2C52e85842502df66A6dB107fde"
  ],
  "numDeployments": 1,
  "solcInputHash": "65cfd0c0b4d5f7bdb3aa76776507f32b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoTreasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xMozAmount\",\"type\":\"uint256\"}],\"name\":\"CancelRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Convert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xMozAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mozAmount\",\"type\":\"uint256\"}],\"name\":\"FinalizeRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"xMozAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mozAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRedeemRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mediumRedeemRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRedeemRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minRedeemDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mediumRedeemDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRedeemDuration\",\"type\":\"uint256\"}],\"name\":\"UpdateRedeemSettings\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FIXED_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemIndex\",\"type\":\"uint256\"}],\"name\":\"cancelRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemIndex\",\"type\":\"uint256\"}],\"name\":\"finalizeRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getMozByVestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRedeemingXMozBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemIndex\",\"type\":\"uint256\"}],\"name\":\"getUserRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mozAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xMozAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserRedeemsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mozaicToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"xMoztoken_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeemDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeemRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediumRedeemDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mediumRedeemRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRedeemDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRedeemRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mozaicToken\",\"outputs\":[{\"internalType\":\"contract IMozToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xMozAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRedeemRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumRedeemRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRedeemRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRedeemDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediumRedeemDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRedeemDuration_\",\"type\":\"uint256\"}],\"name\":\"updateRedeemSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRedeems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mozAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xMozAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xMozRedeemingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xMozToken\",\"outputs\":[{\"internalType\":\"contract IXMozToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"cancelRedeem(uint256)\":{\"details\":\"Cancels an ongoing redeem entry Can only be called by its owner\"},\"constructor\":{\"custom:security-contact\":\"mailto:security@mozaic.finance\"},\"convert(uint256)\":{\"details\":\"Convert caller's \\\"amount\\\" of MOZ to xMOZ\"},\"finalizeRedeem(uint256)\":{\"details\":\"Finalizes redeem process when vesting duration has been reached Can only be called by the redeem entry owner\"},\"getMozByVestingDuration(uint256,uint256)\":{\"details\":\"returns redeemable MOZ for \\\"amount\\\" of xMOZ vested for \\\"duration\\\" seconds\"},\"getRedeemingXMozBalance(address)\":{\"details\":\"Returns user's xMOZ balances\"},\"getUserRedeem(address,uint256)\":{\"details\":\"returns \\\"userAddress\\\" info for a pending redeem identified by \\\"redeemIndex\\\"\"},\"getUserRedeemsLength(address)\":{\"details\":\"returns quantity of \\\"userAddress\\\" pending redeems\"},\"initialize(address,address)\":{\"details\":\"Initialize contract parameters\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256,uint256)\":{\"details\":\"Initiates redeem process (xMOZ to MOZ)\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateRedeemSettings(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Updates all redeem ratios and durations Must only be called by owner\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/MozStaking.sol\":\"MozStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/interfaces/IMozToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMozToken is IERC20 {\\n\\tfunction burn(uint256 amount, address from) external;\\n\\tfunction mint(uint256 amount, address to) external;\\n}\",\"keccak256\":\"0xe15b2d0eeaaec6169bf5a54dff174302136e2f43f692134e58721203cd4eae4f\",\"license\":\"MIT\"},\"contracts/interfaces/IXMozToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IXMozToken is IERC20 {\\n\\n    function mint(uint256 amount, address to) external;\\n\\n    function isTransferWhitelisted(address account) external view returns (bool);\\n\\n    function burn(uint256 amount, address to) external;\\n\\n    function updateTransferWhitelist(address account, bool flag) external;\\n\\n}\",\"keccak256\":\"0x1204f73792228adcd90ede462957effbb967e33870ca0590375dd9d416848aaf\",\"license\":\"MIT\"},\"contracts/tokens/MozStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.24;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IMozToken } from \\\"../interfaces/IMozToken.sol\\\";\\nimport { IXMozToken } from \\\"../interfaces/IXMozToken.sol\\\";\\n\\n/*\\n * MozStaking is Mozaic's escrowed governance token obtainable by converting MOZ to it\\n * It's non-transferable, except from/to whitelisted addresses\\n * It can be converted back to MOZ through a vesting process\\n * This contract is made to receive MozStaking deposits from users in order to allocate them to Usages (plugins) contracts\\n */\\ncontract MozStaking is Ownable {\\n    \\n    using Address for address;\\n    using SafeERC20 for IMozToken;\\n    using SafeERC20 for IXMozToken;\\n\\n    struct RedeemInfo {\\n        uint256 mozAmount; // MOZ amount to receive when vesting has ended\\n        uint256 xMozAmount; // xMOZ amount to redeem\\n        uint256 endTime;\\n    }\\n\\n    IMozToken public mozaicToken; // MOZ token to convert to/from\\n    IXMozToken public xMozToken;\\n    address public daoTreasury;\\n    bool private flag;\\n    uint256 public constant MAX_FIXED_RATIO = 100; // 100%\\n\\n    // Redeeming min/max settings\\n    uint256 public minRedeemRatio = 50; // 1:0.5\\n    uint256 public mediumRedeemRatio = 75; // 1:0.75\\n    uint256 public maxRedeemRatio = 100; // 1:1\\n    uint256 public minRedeemDuration = 15 days; // 1,296,000s\\n    uint256 public mediumRedeemDuration = 30 days; // 2,592,000s\\n    uint256 public maxRedeemDuration = 45 days; // 3,888,000s\\n\\n    mapping(address => uint256) public xMozRedeemingBalances; // User's xMOZ balances\\n    mapping(address => RedeemInfo[]) public userRedeems; // User's redeeming instances\\n\\n    /**\\n     * @custom:security-contact mailto:security@mozaic.finance\\n     */\\n\\n    constructor(address daoTreasury_) Ownable(msg.sender)\\n    {\\n        require(daoTreasury_ != address(0x0), \\\"Invalid addr\\\");\\n        daoTreasury = daoTreasury_;\\n    }\\n\\n    /********************************************/\\n    /****************** EVENTS ******************/\\n    /********************************************/\\n\\n    event Convert(address indexed from, address to, uint256 amount);\\n    event UpdateRedeemSettings(uint256 minRedeemRatio, uint256 mediumRedeemRatio, uint256 maxRedeemRatio, uint256 minRedeemDuration, uint256 mediumRedeemDuration, uint256 maxRedeemDuration);\\n    event Redeem(address indexed userAddress, uint256 xMozAmount, uint256 mozAmount, uint256 duration);\\n    event FinalizeRedeem(address indexed userAddress, uint256 xMozAmount, uint256 mozAmount);\\n    event CancelRedeem(address indexed userAddress, uint256 xMozAmount);\\n\\n    /***********************************************/\\n    /****************** MODIFIERS ******************/\\n    /***********************************************/\\n\\n    /**\\n    * @dev Check if a redeem entry exists\\n    */\\n    modifier validateRedeem(address userAddress, uint256 redeemIndex) {\\n        require(redeemIndex < userRedeems[userAddress].length, \\\"validateRedeem: redeem entry does not exist\\\");\\n        _;\\n    }\\n\\n    /**************************************************/\\n    /******************* INITIALIZE* ******************/\\n    /**************************************************/\\n\\n    /**\\n    * @dev Initialize contract parameters\\n     */\\n    function initialize(address mozaicToken_, address xMoztoken_) external onlyOwner() {\\n        require(mozaicToken_ != address(0x0) || xMoztoken_ != address(0x0), \\\"Invalid addr\\\");\\n        require(!flag, \\\"Already initialized\\\");\\n        mozaicToken = IMozToken(mozaicToken_);\\n        xMozToken = IXMozToken(xMoztoken_);\\n        flag = true;\\n    }\\n\\n    /**************************************************/\\n    /****************** PUBLIC VIEWS ******************/\\n    /**************************************************/\\n\\n    /**\\n    * @dev Returns user's xMOZ balances\\n    */\\n    function getRedeemingXMozBalance(address userAddress) external view returns (uint256 redeemingAmount) {\\n        uint256 balance = xMozRedeemingBalances[userAddress];\\n        return balance;\\n    }\\n\\n    /**\\n    * @dev returns redeemable MOZ for \\\"amount\\\" of xMOZ vested for \\\"duration\\\" seconds\\n    */\\n    function getMozByVestingDuration(uint256 amount, uint256 duration) public view returns (uint256) {\\n        uint256 ratio;\\n        \\n        if(duration < minRedeemDuration) {\\n            return 0;\\n        }\\n        else if(duration >= minRedeemDuration && duration < mediumRedeemDuration) {\\n            ratio = minRedeemRatio + (mediumRedeemRatio - minRedeemRatio) * (duration - minRedeemDuration) / (mediumRedeemDuration - minRedeemDuration);\\n        }\\n        else if(duration >= mediumRedeemDuration && duration < maxRedeemDuration) {\\n            ratio = mediumRedeemRatio + (maxRedeemRatio - mediumRedeemRatio) * (duration - mediumRedeemDuration) / (maxRedeemDuration - mediumRedeemDuration);\\n        }\\n        // capped to maxRedeemDuration\\n        else {\\n            ratio = maxRedeemRatio;\\n        }\\n\\n        return amount * ratio / MAX_FIXED_RATIO;\\n    }\\n\\n    /**\\n    * @dev returns quantity of \\\"userAddress\\\" pending redeems\\n    */\\n    function getUserRedeemsLength(address userAddress) external view returns (uint256) {\\n        return userRedeems[userAddress].length;\\n    }\\n\\n    /**\\n    * @dev returns \\\"userAddress\\\" info for a pending redeem identified by \\\"redeemIndex\\\"\\n    */\\n    function getUserRedeem(address userAddress, uint256 redeemIndex) external view validateRedeem(userAddress, redeemIndex) returns (uint256 mozAmount, uint256 xMozAmount, uint256 endTime) {\\n        RedeemInfo storage _redeem = userRedeems[userAddress][redeemIndex];\\n        return (_redeem.mozAmount, _redeem.xMozAmount, _redeem.endTime);\\n    }\\n\\n    /*******************************************************/\\n    /****************** OWNABLE FUNCTIONS ******************/\\n    /*******************************************************/\\n\\n    /**\\n    * @dev Updates all redeem ratios and durations\\n    *\\n    * Must only be called by owner\\n    */\\n    function updateRedeemSettings(uint256 minRedeemRatio_, uint256 mediumRedeemRatio_, uint256 maxRedeemRatio_, uint256 minRedeemDuration_, uint256 mediumRedeemDuration_, uint256 maxRedeemDuration_) external onlyOwner {\\n        require(minRedeemRatio_ <= mediumRedeemRatio_ && mediumRedeemRatio_ <= maxRedeemRatio_, \\\"updateRedeemSettings: wrong ratio values\\\");\\n        require(minRedeemDuration_ < mediumRedeemDuration_ && mediumRedeemDuration_ < maxRedeemDuration_, \\\"updateRedeemSettings: wrong duration values\\\");\\n        // should never exceed 100%\\n        require(maxRedeemRatio_ <= MAX_FIXED_RATIO, \\\"updateRedeemSettings: wrong ratio values\\\");\\n\\n        minRedeemRatio = minRedeemRatio_;\\n        mediumRedeemRatio = mediumRedeemRatio_;\\n        maxRedeemRatio = maxRedeemRatio_;\\n        minRedeemDuration = minRedeemDuration_;\\n        mediumRedeemDuration = mediumRedeemDuration_;\\n        maxRedeemDuration = maxRedeemDuration_;\\n\\n        emit UpdateRedeemSettings(minRedeemRatio_, mediumRedeemRatio_, maxRedeemRatio_, minRedeemDuration_, mediumRedeemDuration_, maxRedeemDuration_);\\n    }\\n\\n\\n    /*****************************************************************/\\n    /******************  EXTERNAL PUBLIC FUNCTIONS  ******************/\\n    /*****************************************************************/\\n\\n    /**\\n    * @dev Convert caller's \\\"amount\\\" of MOZ to xMOZ\\n    */\\n    function convert(uint256 amount) external  {\\n        _convert(amount, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Initiates redeem process (xMOZ to MOZ)\\n    *\\n    */\\n    function redeem(uint256 xMozAmount, uint256 duration) external  {\\n        require(xMozAmount > 0, \\\"redeem: xMozAmount cannot be zero\\\");\\n        require(duration >= minRedeemDuration, \\\"redeem: Invalid duration\\\");\\n        uint256 mozAmount = getMozByVestingDuration(xMozAmount, duration);\\n        xMozToken.burn(xMozAmount, msg.sender);\\n        uint256 redeemingAmount = xMozRedeemingBalances[msg.sender];\\n        // get corresponding MOZ amount\\n        if (mozAmount > 0) {\\n             emit Redeem(msg.sender, xMozAmount, mozAmount, duration);\\n            // add to total\\n            xMozRedeemingBalances[msg.sender] = redeemingAmount + xMozAmount;\\n            // add redeeming entry\\n            userRedeems[msg.sender].push(RedeemInfo(mozAmount, xMozAmount, _currentBlockTimestamp() + duration));\\n        }\\n    }\\n\\n    /**\\n    * @dev Finalizes redeem process when vesting duration has been reached\\n    *\\n    * Can only be called by the redeem entry owner\\n    */\\n    function finalizeRedeem(uint256 redeemIndex) external  validateRedeem(msg.sender, redeemIndex) {\\n        uint256 redeemingAmount = xMozRedeemingBalances[msg.sender];\\n        RedeemInfo storage _redeem = userRedeems[msg.sender][redeemIndex];\\n        require(_currentBlockTimestamp() >= _redeem.endTime, \\\"finalizeRedeem: vesting duration has not ended yet\\\");\\n\\n        // remove from SBT total\\n        xMozRedeemingBalances[msg.sender] = redeemingAmount - _redeem.xMozAmount;\\n        _finalizeRedeem(msg.sender, _redeem.xMozAmount, _redeem.mozAmount);\\n        // remove redeem entry\\n        _deleteRedeemEntry(redeemIndex);\\n    }\\n\\n    \\n    /**\\n    * @dev Cancels an ongoing redeem entry\\n    *\\n    * Can only be called by its owner\\n    */\\n    function cancelRedeem(uint256 redeemIndex) external  validateRedeem(msg.sender, redeemIndex) {\\n        uint256 redeemingAmount = xMozRedeemingBalances[msg.sender];\\n        RedeemInfo storage _redeem = userRedeems[msg.sender][redeemIndex];\\n\\n        // make redeeming xMOZ available again\\n        xMozRedeemingBalances[msg.sender] = redeemingAmount - _redeem.xMozAmount;\\n        xMozToken.mint(_redeem.xMozAmount, msg.sender);\\n\\n        emit CancelRedeem(msg.sender, _redeem.xMozAmount);\\n\\n        // remove redeem entry\\n        _deleteRedeemEntry(redeemIndex);\\n    }\\n\\n    /********************************************************/\\n    /****************** INTERNAL FUNCTIONS ******************/\\n    /********************************************************/\\n\\n    /**\\n    * @dev Convert caller's \\\"amount\\\" of MOZ into xMOZ to \\\"to\\\"\\n    */\\n    function _convert(uint256 amount, address to) internal {\\n        require(amount != 0, \\\"convert: amount cannot be null\\\");\\n\\n        mozaicToken.burn(amount, msg.sender);\\n        // mint new xMOZ\\n        xMozToken.mint(amount, to);\\n\\n        emit Convert(msg.sender, to, amount);\\n    }\\n\\n    /**\\n    * @dev Finalizes the redeeming process for \\\"userAddress\\\" by transferring him \\\"mozAmount\\\" and removing \\\"xMozAmount\\\" from supply\\n    *\\n    * Any vesting check should be ran before calling this\\n    * MOZ excess is automatically burnt\\n    */\\n    function _finalizeRedeem(address userAddress, uint256 xMozAmount, uint256 mozAmount) internal {\\n        // sends due MOZ tokens \\n        uint256 mozExcess = xMozAmount - mozAmount;\\n        // sends due Moz tokens\\n        mozaicToken.mint(mozAmount, userAddress);\\n        // burns Moz excess if any\\n        if(mozExcess > 0) {\\n            mozaicToken.mint(mozExcess, daoTreasury);\\n        }\\n        emit FinalizeRedeem(userAddress, xMozAmount, mozAmount);\\n    }\\n\\n\\n    function _deleteRedeemEntry(uint256 index) internal {\\n        userRedeems[msg.sender][index] = userRedeems[msg.sender][userRedeems[msg.sender].length - 1];\\n        userRedeems[msg.sender].pop();\\n    }\\n\\n    /**\\n    * @dev Utility function to get the current block timestamp\\n    */\\n    function _currentBlockTimestamp() internal view virtual returns (uint256) {\\n        /* solhint-disable not-rely-on-time */\\n        return block.timestamp;\\n    }\\n}\",\"keccak256\":\"0x8e5b02ecce63c454db9bec70d74cc3f86751515df58710de3fde37b0acc23fa8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040526032600455604b60055560646006556213c68060075562278d00600855623b538060095534801561003457600080fd5b5060405161144e38038061144e8339810160408190526100539161013e565b338061007a57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610083816100ee565b506001600160a01b0381166100c95760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b21030b2323960a11b6044820152606401610071565b600380546001600160a01b0319166001600160a01b039290921691909117905561016e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561015057600080fd5b81516001600160a01b038116811461016757600080fd5b9392505050565b6112d18061017d6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638da5cb5b116100de578063c4b1076611610097578063e07c9e1711610071578063e07c9e1714610348578063e3a2950b1461035b578063e9ed87f814610364578063f2fde38b1461036d57600080fd5b8063c4b1076614610323578063cc6c54231461032c578063ccda6af71461033f57600080fd5b80638da5cb5b1461029a5780639226d836146102ab578063a3908e1b146102b4578063a59c1606146102c7578063aff6cbf1146102e7578063b90c2b52146102fa57600080fd5b8063619ac95b11610130578063619ac95b1461023e57806370d74c9514610246578063715018a61461025957806379022a9f146102615780637cbc23731461027457806386a146ac1461028757600080fd5b806315e3473d146101785780631c352679146101b4578063390f7eee146101bd578063485cc955146101e85780634f62b7ec146101fd578063539ffb771461022b575b600080fd5b6101a161018636600461106a565b6001600160a01b03166000908152600a602052604090205490565b6040519081526020015b60405180910390f35b6101a160045481565b6001546101d0906001600160a01b031681565b6040516001600160a01b0390911681526020016101ab565b6101fb6101f636600461108c565b610380565b005b61021061020b3660046110bf565b610478565b604080519384526020840192909252908201526060016101ab565b6101fb6102393660046110e9565b6104ba565b6101a1606481565b6002546101d0906001600160a01b031681565b6101fb610601565b6003546101d0906001600160a01b031681565b6101fb610282366004611102565b610615565b6101a1610295366004611102565b61080f565b6000546001600160a01b03166101d0565b6101a160085481565b6101fb6102c23660046110e9565b61091e565b6101a16102d536600461106a565b600a6020526000908152604090205481565b6101fb6102f53660046110e9565b61092b565b6101a161030836600461106a565b6001600160a01b03166000908152600b602052604090205490565b6101a160075481565b61021061033a3660046110bf565b610a4c565b6101a160055481565b6101fb610356366004611124565b610ae4565b6101a160065481565b6101a160095481565b6101fb61037b36600461106a565b610c23565b610388610c5e565b6001600160a01b0382161515806103a757506001600160a01b03811615155b6103e75760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b21030b2323960a11b60448201526064015b60405180910390fd5b600354600160a01b900460ff16156104375760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016103de565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556003805460ff60a01b1916600160a01b179055565b600b602052816000526040600020818154811061049457600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b336000818152600b6020526040902054829081106104ea5760405162461bcd60e51b81526004016103de90611167565b336000908152600a6020908152604080832054600b9092528220805491929186908110610519576105196111b2565b9060005260206000209060030201905080600101548261053991906111de565b336000818152600a60205260409081902092909255600254600184015492516394bf804d60e01b8152600481019390935260248301919091526001600160a01b0316906394bf804d90604401600060405180830381600087803b15801561059f57600080fd5b505af11580156105b3573d6000803e3d6000fd5b50505050600181015460405190815233907f56d7520e387607a8daa892e3fed116badc2a636307bdc794b1c1aed97ae203f49060200160405180910390a26105fa85610c8b565b5050505050565b610609610c5e565b6106136000610d6c565b565b6000821161066f5760405162461bcd60e51b815260206004820152602160248201527f72656465656d3a20784d6f7a416d6f756e742063616e6e6f74206265207a65726044820152606f60f81b60648201526084016103de565b6007548110156106c15760405162461bcd60e51b815260206004820152601860248201527f72656465656d3a20496e76616c6964206475726174696f6e000000000000000060448201526064016103de565b60006106cd838361080f565b600254604051633f34d4cf60e21b8152600481018690523360248201529192506001600160a01b03169063fcd3533c90604401600060405180830381600087803b15801561071a57600080fd5b505af115801561072e573d6000803e3d6000fd5b5050336000908152600a6020526040902054915050811561080957604080518581526020810184905290810184905233907fbd5034ffbd47e4e72a94baa2cdb74c6fad73cb3bcdc13036b72ec8306f5a76469060600160405180910390a261079684826111f1565b336000908152600a6020908152604080832093909355600b81529082902082516060810184528581529182018790529181016107d286426111f1565b9052815460018181018455600093845260209384902083516003909302019182559282015192810192909255604001516002909101555b50505050565b600080600754831015610826576000915050610918565b6007548310158015610839575060085483105b156108935760075460085461084e91906111de565b60075461085b90856111de565b60045460055461086b91906111de565b6108759190611204565b61087f919061121b565b60045461088c91906111f1565b90506108fe565b60085483101580156108a6575060095483105b156108f9576008546009546108bb91906111de565b6008546108c890856111de565b6005546006546108d891906111de565b6108e29190611204565b6108ec919061121b565b60055461088c91906111f1565b506006545b606461090a8286611204565b610914919061121b565b9150505b92915050565b6109288133610dbc565b50565b336000818152600b60205260409020548290811061095b5760405162461bcd60e51b81526004016103de90611167565b336000908152600a6020908152604080832054600b909252822080549192918690811061098a5761098a6111b2565b9060005260206000209060030201905080600201546109a64290565b1015610a0f5760405162461bcd60e51b815260206004820152603260248201527f66696e616c697a6552656465656d3a2076657374696e67206475726174696f6e604482015271081a185cc81b9bdd08195b991959081e595d60721b60648201526084016103de565b6001810154610a1e90836111de565b336000818152600a602052604090209190915560018201548254610a43929190610f1e565b6105fa85610c8b565b6001600160a01b0382166000908152600b602052604081205481908190859085908110610a8b5760405162461bcd60e51b81526004016103de90611167565b6001600160a01b0387166000908152600b60205260408120805488908110610ab557610ab56111b2565b906000526020600020906003020190508060000154816001015482600201549550955095505050509250925092565b610aec610c5e565b848611158015610afc5750838511155b610b185760405162461bcd60e51b81526004016103de9061123d565b8183108015610b2657508082105b610b865760405162461bcd60e51b815260206004820152602b60248201527f75706461746552656465656d53657474696e67733a2077726f6e67206475726160448201526a74696f6e2076616c75657360a81b60648201526084016103de565b6064841115610ba75760405162461bcd60e51b81526004016103de9061123d565b6004869055600585905560068490556007839055600882905560098190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527f3e4d06270c5626e5435a80d53329136371e0df74a6762eb79aa22d800d2cc6c29060c00160405180910390a1505050505050565b610c2b610c5e565b6001600160a01b038116610c5557604051631e4fbdf760e01b8152600060048201526024016103de565b61092881610d6c565b6000546001600160a01b031633146106135760405163118cdaa760e01b81523360048201526024016103de565b336000908152600b602052604090208054610ca8906001906111de565b81548110610cb857610cb86111b2565b9060005260206000209060030201600b6000336001600160a01b03166001600160a01b031681526020019081526020016000208281548110610cfc57610cfc6111b2565b600091825260208083208454600390930201918255600180850154908301556002938401549390910192909255338152600b90915260409020805480610d4457610d44611285565b6000828152602081206003600019909301928302018181556001810182905560020155905550565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81600003610e0c5760405162461bcd60e51b815260206004820152601e60248201527f636f6e766572743a20616d6f756e742063616e6e6f74206265206e756c6c000060448201526064016103de565b600154604051633f34d4cf60e21b8152600481018490523360248201526001600160a01b039091169063fcd3533c90604401600060405180830381600087803b158015610e5857600080fd5b505af1158015610e6c573d6000803e3d6000fd5b50506002546040516394bf804d60e01b8152600481018690526001600160a01b03858116602483015290911692506394bf804d9150604401600060405180830381600087803b158015610ebe57600080fd5b505af1158015610ed2573d6000803e3d6000fd5b5050604080516001600160a01b0385168152602081018690523393507fccfaeb3043a96a967dc036ab72e078a9632af809671bc2a1ac30a8043645f89e92500160405180910390a25050565b6000610f2a82846111de565b6001546040516394bf804d60e01b8152600481018590526001600160a01b0387811660248301529293509116906394bf804d90604401600060405180830381600087803b158015610f7a57600080fd5b505af1158015610f8e573d6000803e3d6000fd5b505050506000811115611004576001546003546040516394bf804d60e01b8152600481018490526001600160a01b0391821660248201529116906394bf804d90604401600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050505b60408051848152602081018490526001600160a01b038616917f0da072ebd7a5649099f43a3776eb0cda17aca79426ee9f28aae203f5dfa04eda910160405180910390a250505050565b80356001600160a01b038116811461106557600080fd5b919050565b60006020828403121561107c57600080fd5b6110858261104e565b9392505050565b6000806040838503121561109f57600080fd5b6110a88361104e565b91506110b66020840161104e565b90509250929050565b600080604083850312156110d257600080fd5b6110db8361104e565b946020939093013593505050565b6000602082840312156110fb57600080fd5b5035919050565b6000806040838503121561111557600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561113d57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252602b908201527f76616c696461746552656465656d3a2072656465656d20656e74727920646f6560408201526a1cc81b9bdd08195e1a5cdd60aa1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610918576109186111c8565b80820180821115610918576109186111c8565b8082028115828204841417610918576109186111c8565b60008261123857634e487b7160e01b600052601260045260246000fd5b500490565b60208082526028908201527f75706461746552656465656d53657474696e67733a2077726f6e6720726174696040820152676f2076616c75657360c01b606082015260800190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220944a1f71bccc4c9210fab0dffafc91b1a14da593594d6604e2ad535092e871b564736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80638da5cb5b116100de578063c4b1076611610097578063e07c9e1711610071578063e07c9e1714610348578063e3a2950b1461035b578063e9ed87f814610364578063f2fde38b1461036d57600080fd5b8063c4b1076614610323578063cc6c54231461032c578063ccda6af71461033f57600080fd5b80638da5cb5b1461029a5780639226d836146102ab578063a3908e1b146102b4578063a59c1606146102c7578063aff6cbf1146102e7578063b90c2b52146102fa57600080fd5b8063619ac95b11610130578063619ac95b1461023e57806370d74c9514610246578063715018a61461025957806379022a9f146102615780637cbc23731461027457806386a146ac1461028757600080fd5b806315e3473d146101785780631c352679146101b4578063390f7eee146101bd578063485cc955146101e85780634f62b7ec146101fd578063539ffb771461022b575b600080fd5b6101a161018636600461106a565b6001600160a01b03166000908152600a602052604090205490565b6040519081526020015b60405180910390f35b6101a160045481565b6001546101d0906001600160a01b031681565b6040516001600160a01b0390911681526020016101ab565b6101fb6101f636600461108c565b610380565b005b61021061020b3660046110bf565b610478565b604080519384526020840192909252908201526060016101ab565b6101fb6102393660046110e9565b6104ba565b6101a1606481565b6002546101d0906001600160a01b031681565b6101fb610601565b6003546101d0906001600160a01b031681565b6101fb610282366004611102565b610615565b6101a1610295366004611102565b61080f565b6000546001600160a01b03166101d0565b6101a160085481565b6101fb6102c23660046110e9565b61091e565b6101a16102d536600461106a565b600a6020526000908152604090205481565b6101fb6102f53660046110e9565b61092b565b6101a161030836600461106a565b6001600160a01b03166000908152600b602052604090205490565b6101a160075481565b61021061033a3660046110bf565b610a4c565b6101a160055481565b6101fb610356366004611124565b610ae4565b6101a160065481565b6101a160095481565b6101fb61037b36600461106a565b610c23565b610388610c5e565b6001600160a01b0382161515806103a757506001600160a01b03811615155b6103e75760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b21030b2323960a11b60448201526064015b60405180910390fd5b600354600160a01b900460ff16156104375760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016103de565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556003805460ff60a01b1916600160a01b179055565b600b602052816000526040600020818154811061049457600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b336000818152600b6020526040902054829081106104ea5760405162461bcd60e51b81526004016103de90611167565b336000908152600a6020908152604080832054600b9092528220805491929186908110610519576105196111b2565b9060005260206000209060030201905080600101548261053991906111de565b336000818152600a60205260409081902092909255600254600184015492516394bf804d60e01b8152600481019390935260248301919091526001600160a01b0316906394bf804d90604401600060405180830381600087803b15801561059f57600080fd5b505af11580156105b3573d6000803e3d6000fd5b50505050600181015460405190815233907f56d7520e387607a8daa892e3fed116badc2a636307bdc794b1c1aed97ae203f49060200160405180910390a26105fa85610c8b565b5050505050565b610609610c5e565b6106136000610d6c565b565b6000821161066f5760405162461bcd60e51b815260206004820152602160248201527f72656465656d3a20784d6f7a416d6f756e742063616e6e6f74206265207a65726044820152606f60f81b60648201526084016103de565b6007548110156106c15760405162461bcd60e51b815260206004820152601860248201527f72656465656d3a20496e76616c6964206475726174696f6e000000000000000060448201526064016103de565b60006106cd838361080f565b600254604051633f34d4cf60e21b8152600481018690523360248201529192506001600160a01b03169063fcd3533c90604401600060405180830381600087803b15801561071a57600080fd5b505af115801561072e573d6000803e3d6000fd5b5050336000908152600a6020526040902054915050811561080957604080518581526020810184905290810184905233907fbd5034ffbd47e4e72a94baa2cdb74c6fad73cb3bcdc13036b72ec8306f5a76469060600160405180910390a261079684826111f1565b336000908152600a6020908152604080832093909355600b81529082902082516060810184528581529182018790529181016107d286426111f1565b9052815460018181018455600093845260209384902083516003909302019182559282015192810192909255604001516002909101555b50505050565b600080600754831015610826576000915050610918565b6007548310158015610839575060085483105b156108935760075460085461084e91906111de565b60075461085b90856111de565b60045460055461086b91906111de565b6108759190611204565b61087f919061121b565b60045461088c91906111f1565b90506108fe565b60085483101580156108a6575060095483105b156108f9576008546009546108bb91906111de565b6008546108c890856111de565b6005546006546108d891906111de565b6108e29190611204565b6108ec919061121b565b60055461088c91906111f1565b506006545b606461090a8286611204565b610914919061121b565b9150505b92915050565b6109288133610dbc565b50565b336000818152600b60205260409020548290811061095b5760405162461bcd60e51b81526004016103de90611167565b336000908152600a6020908152604080832054600b909252822080549192918690811061098a5761098a6111b2565b9060005260206000209060030201905080600201546109a64290565b1015610a0f5760405162461bcd60e51b815260206004820152603260248201527f66696e616c697a6552656465656d3a2076657374696e67206475726174696f6e604482015271081a185cc81b9bdd08195b991959081e595d60721b60648201526084016103de565b6001810154610a1e90836111de565b336000818152600a602052604090209190915560018201548254610a43929190610f1e565b6105fa85610c8b565b6001600160a01b0382166000908152600b602052604081205481908190859085908110610a8b5760405162461bcd60e51b81526004016103de90611167565b6001600160a01b0387166000908152600b60205260408120805488908110610ab557610ab56111b2565b906000526020600020906003020190508060000154816001015482600201549550955095505050509250925092565b610aec610c5e565b848611158015610afc5750838511155b610b185760405162461bcd60e51b81526004016103de9061123d565b8183108015610b2657508082105b610b865760405162461bcd60e51b815260206004820152602b60248201527f75706461746552656465656d53657474696e67733a2077726f6e67206475726160448201526a74696f6e2076616c75657360a81b60648201526084016103de565b6064841115610ba75760405162461bcd60e51b81526004016103de9061123d565b6004869055600585905560068490556007839055600882905560098190556040805187815260208101879052908101859052606081018490526080810183905260a081018290527f3e4d06270c5626e5435a80d53329136371e0df74a6762eb79aa22d800d2cc6c29060c00160405180910390a1505050505050565b610c2b610c5e565b6001600160a01b038116610c5557604051631e4fbdf760e01b8152600060048201526024016103de565b61092881610d6c565b6000546001600160a01b031633146106135760405163118cdaa760e01b81523360048201526024016103de565b336000908152600b602052604090208054610ca8906001906111de565b81548110610cb857610cb86111b2565b9060005260206000209060030201600b6000336001600160a01b03166001600160a01b031681526020019081526020016000208281548110610cfc57610cfc6111b2565b600091825260208083208454600390930201918255600180850154908301556002938401549390910192909255338152600b90915260409020805480610d4457610d44611285565b6000828152602081206003600019909301928302018181556001810182905560020155905550565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b81600003610e0c5760405162461bcd60e51b815260206004820152601e60248201527f636f6e766572743a20616d6f756e742063616e6e6f74206265206e756c6c000060448201526064016103de565b600154604051633f34d4cf60e21b8152600481018490523360248201526001600160a01b039091169063fcd3533c90604401600060405180830381600087803b158015610e5857600080fd5b505af1158015610e6c573d6000803e3d6000fd5b50506002546040516394bf804d60e01b8152600481018690526001600160a01b03858116602483015290911692506394bf804d9150604401600060405180830381600087803b158015610ebe57600080fd5b505af1158015610ed2573d6000803e3d6000fd5b5050604080516001600160a01b0385168152602081018690523393507fccfaeb3043a96a967dc036ab72e078a9632af809671bc2a1ac30a8043645f89e92500160405180910390a25050565b6000610f2a82846111de565b6001546040516394bf804d60e01b8152600481018590526001600160a01b0387811660248301529293509116906394bf804d90604401600060405180830381600087803b158015610f7a57600080fd5b505af1158015610f8e573d6000803e3d6000fd5b505050506000811115611004576001546003546040516394bf804d60e01b8152600481018490526001600160a01b0391821660248201529116906394bf804d90604401600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050505b60408051848152602081018490526001600160a01b038616917f0da072ebd7a5649099f43a3776eb0cda17aca79426ee9f28aae203f5dfa04eda910160405180910390a250505050565b80356001600160a01b038116811461106557600080fd5b919050565b60006020828403121561107c57600080fd5b6110858261104e565b9392505050565b6000806040838503121561109f57600080fd5b6110a88361104e565b91506110b66020840161104e565b90509250929050565b600080604083850312156110d257600080fd5b6110db8361104e565b946020939093013593505050565b6000602082840312156110fb57600080fd5b5035919050565b6000806040838503121561111557600080fd5b50508035926020909101359150565b60008060008060008060c0878903121561113d57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6020808252602b908201527f76616c696461746552656465656d3a2072656465656d20656e74727920646f6560408201526a1cc81b9bdd08195e1a5cdd60aa1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610918576109186111c8565b80820180821115610918576109186111c8565b8082028115828204841417610918576109186111c8565b60008261123857634e487b7160e01b600052601260045260246000fd5b500490565b60208082526028908201527f75706461746552656465656d53657474696e67733a2077726f6e6720726174696040820152676f2076616c75657360c01b606082015260800190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220944a1f71bccc4c9210fab0dffafc91b1a14da593594d6604e2ad535092e871b564736f6c63430008180033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "cancelRedeem(uint256)": {
        "details": "Cancels an ongoing redeem entry Can only be called by its owner"
      },
      "constructor": {
        "custom:security-contact": "mailto:security@mozaic.finance"
      },
      "convert(uint256)": {
        "details": "Convert caller's \"amount\" of MOZ to xMOZ"
      },
      "finalizeRedeem(uint256)": {
        "details": "Finalizes redeem process when vesting duration has been reached Can only be called by the redeem entry owner"
      },
      "getMozByVestingDuration(uint256,uint256)": {
        "details": "returns redeemable MOZ for \"amount\" of xMOZ vested for \"duration\" seconds"
      },
      "getRedeemingXMozBalance(address)": {
        "details": "Returns user's xMOZ balances"
      },
      "getUserRedeem(address,uint256)": {
        "details": "returns \"userAddress\" info for a pending redeem identified by \"redeemIndex\""
      },
      "getUserRedeemsLength(address)": {
        "details": "returns quantity of \"userAddress\" pending redeems"
      },
      "initialize(address,address)": {
        "details": "Initialize contract parameters"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256,uint256)": {
        "details": "Initiates redeem process (xMOZ to MOZ)"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateRedeemSettings(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Updates all redeem ratios and durations Must only be called by owner"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3938,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6158,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "mozaicToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMozToken)6088"
      },
      {
        "astId": 6161,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "xMozToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IXMozToken)6123"
      },
      {
        "astId": 6163,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "daoTreasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6165,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "flag",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 6171,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "minRedeemRatio",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 6174,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "mediumRedeemRatio",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6177,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "maxRedeemRatio",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6180,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "minRedeemDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6183,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "mediumRedeemDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6186,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "maxRedeemDuration",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6190,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "xMozRedeemingBalances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6196,
        "contract": "contracts/tokens/MozStaking.sol:MozStaking",
        "label": "userRedeems",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_struct(RedeemInfo)6155_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RedeemInfo)6155_storage)dyn_storage": {
        "base": "t_struct(RedeemInfo)6155_storage",
        "encoding": "dynamic_array",
        "label": "struct MozStaking.RedeemInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMozToken)6088": {
        "encoding": "inplace",
        "label": "contract IMozToken",
        "numberOfBytes": "20"
      },
      "t_contract(IXMozToken)6123": {
        "encoding": "inplace",
        "label": "contract IXMozToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(RedeemInfo)6155_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MozStaking.RedeemInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RedeemInfo)6155_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RedeemInfo)6155_storage": {
        "encoding": "inplace",
        "label": "struct MozStaking.RedeemInfo",
        "members": [
          {
            "astId": 6150,
            "contract": "contracts/tokens/MozStaking.sol:MozStaking",
            "label": "mozAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6152,
            "contract": "contracts/tokens/MozStaking.sol:MozStaking",
            "label": "xMozAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6154,
            "contract": "contracts/tokens/MozStaking.sol:MozStaking",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}